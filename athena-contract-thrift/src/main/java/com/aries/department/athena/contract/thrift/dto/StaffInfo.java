/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.aries.department.athena.contract.thrift.dto;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-05-07")
public class StaffInfo implements org.apache.thrift.TBase<StaffInfo, StaffInfo._Fields>, java.io.Serializable, Cloneable, Comparable<StaffInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StaffInfo");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField FULLNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fullname", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ALIAS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("aliasName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SEX_FIELD_DESC = new org.apache.thrift.protocol.TField("sex", org.apache.thrift.protocol.TType.I16, (short)4);
  private static final org.apache.thrift.protocol.TField EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("email", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("phone", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField QQ_FIELD_DESC = new org.apache.thrift.protocol.TField("qq", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField WECHAT_FIELD_DESC = new org.apache.thrift.protocol.TField("wechat", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField JOB_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("jobLevel", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField JOB_GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("jobGroup", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField ON_JOB_FIELD_DESC = new org.apache.thrift.protocol.TField("onJob", org.apache.thrift.protocol.TType.BOOL, (short)11);
  private static final org.apache.thrift.protocol.TField DEPARTMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("departmentId", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField COUNTRY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("countryId", org.apache.thrift.protocol.TType.I16, (short)13);
  private static final org.apache.thrift.protocol.TField CITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cityId", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField GAEA_ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("gaeaAccount", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField EMPLOYEE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("employeeId", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField IDENTITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("identityId", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("address", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField JOIN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("joinTime", org.apache.thrift.protocol.TType.STRING, (short)19);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new StaffInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new StaffInfoTupleSchemeFactory();

  public long id; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String fullname; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String aliasName; // optional
  public short sex; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String email; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String phone; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String qq; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String wechat; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String jobLevel; // optional
  public int jobGroup; // optional
  public boolean onJob; // optional
  public int departmentId; // optional
  public short countryId; // optional
  public int cityId; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String gaeaAccount; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String employeeId; // optional
  public int identityId; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String address; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String joinTime; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    FULLNAME((short)2, "fullname"),
    ALIAS_NAME((short)3, "aliasName"),
    SEX((short)4, "sex"),
    EMAIL((short)5, "email"),
    PHONE((short)6, "phone"),
    QQ((short)7, "qq"),
    WECHAT((short)8, "wechat"),
    JOB_LEVEL((short)9, "jobLevel"),
    JOB_GROUP((short)10, "jobGroup"),
    ON_JOB((short)11, "onJob"),
    DEPARTMENT_ID((short)12, "departmentId"),
    COUNTRY_ID((short)13, "countryId"),
    CITY_ID((short)14, "cityId"),
    GAEA_ACCOUNT((short)15, "gaeaAccount"),
    EMPLOYEE_ID((short)16, "employeeId"),
    IDENTITY_ID((short)17, "identityId"),
    ADDRESS((short)18, "address"),
    JOIN_TIME((short)19, "joinTime");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // FULLNAME
          return FULLNAME;
        case 3: // ALIAS_NAME
          return ALIAS_NAME;
        case 4: // SEX
          return SEX;
        case 5: // EMAIL
          return EMAIL;
        case 6: // PHONE
          return PHONE;
        case 7: // QQ
          return QQ;
        case 8: // WECHAT
          return WECHAT;
        case 9: // JOB_LEVEL
          return JOB_LEVEL;
        case 10: // JOB_GROUP
          return JOB_GROUP;
        case 11: // ON_JOB
          return ON_JOB;
        case 12: // DEPARTMENT_ID
          return DEPARTMENT_ID;
        case 13: // COUNTRY_ID
          return COUNTRY_ID;
        case 14: // CITY_ID
          return CITY_ID;
        case 15: // GAEA_ACCOUNT
          return GAEA_ACCOUNT;
        case 16: // EMPLOYEE_ID
          return EMPLOYEE_ID;
        case 17: // IDENTITY_ID
          return IDENTITY_ID;
        case 18: // ADDRESS
          return ADDRESS;
        case 19: // JOIN_TIME
          return JOIN_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __SEX_ISSET_ID = 1;
  private static final int __JOBGROUP_ISSET_ID = 2;
  private static final int __ONJOB_ISSET_ID = 3;
  private static final int __DEPARTMENTID_ISSET_ID = 4;
  private static final int __COUNTRYID_ISSET_ID = 5;
  private static final int __CITYID_ISSET_ID = 6;
  private static final int __IDENTITYID_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.FULLNAME,_Fields.ALIAS_NAME,_Fields.SEX,_Fields.EMAIL,_Fields.PHONE,_Fields.QQ,_Fields.WECHAT,_Fields.JOB_LEVEL,_Fields.JOB_GROUP,_Fields.ON_JOB,_Fields.DEPARTMENT_ID,_Fields.COUNTRY_ID,_Fields.CITY_ID,_Fields.GAEA_ACCOUNT,_Fields.EMPLOYEE_ID,_Fields.IDENTITY_ID,_Fields.ADDRESS,_Fields.JOIN_TIME};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FULLNAME, new org.apache.thrift.meta_data.FieldMetaData("fullname", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ALIAS_NAME, new org.apache.thrift.meta_data.FieldMetaData("aliasName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEX, new org.apache.thrift.meta_data.FieldMetaData("sex", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.EMAIL, new org.apache.thrift.meta_data.FieldMetaData("email", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PHONE, new org.apache.thrift.meta_data.FieldMetaData("phone", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QQ, new org.apache.thrift.meta_data.FieldMetaData("qq", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WECHAT, new org.apache.thrift.meta_data.FieldMetaData("wechat", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.JOB_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("jobLevel", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.JOB_GROUP, new org.apache.thrift.meta_data.FieldMetaData("jobGroup", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ON_JOB, new org.apache.thrift.meta_data.FieldMetaData("onJob", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DEPARTMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("departmentId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COUNTRY_ID, new org.apache.thrift.meta_data.FieldMetaData("countryId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.CITY_ID, new org.apache.thrift.meta_data.FieldMetaData("cityId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GAEA_ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("gaeaAccount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EMPLOYEE_ID, new org.apache.thrift.meta_data.FieldMetaData("employeeId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IDENTITY_ID, new org.apache.thrift.meta_data.FieldMetaData("identityId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("address", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.JOIN_TIME, new org.apache.thrift.meta_data.FieldMetaData("joinTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StaffInfo.class, metaDataMap);
  }

  public StaffInfo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StaffInfo(StaffInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetFullname()) {
      this.fullname = other.fullname;
    }
    if (other.isSetAliasName()) {
      this.aliasName = other.aliasName;
    }
    this.sex = other.sex;
    if (other.isSetEmail()) {
      this.email = other.email;
    }
    if (other.isSetPhone()) {
      this.phone = other.phone;
    }
    if (other.isSetQq()) {
      this.qq = other.qq;
    }
    if (other.isSetWechat()) {
      this.wechat = other.wechat;
    }
    if (other.isSetJobLevel()) {
      this.jobLevel = other.jobLevel;
    }
    this.jobGroup = other.jobGroup;
    this.onJob = other.onJob;
    this.departmentId = other.departmentId;
    this.countryId = other.countryId;
    this.cityId = other.cityId;
    if (other.isSetGaeaAccount()) {
      this.gaeaAccount = other.gaeaAccount;
    }
    if (other.isSetEmployeeId()) {
      this.employeeId = other.employeeId;
    }
    this.identityId = other.identityId;
    if (other.isSetAddress()) {
      this.address = other.address;
    }
    if (other.isSetJoinTime()) {
      this.joinTime = other.joinTime;
    }
  }

  public StaffInfo deepCopy() {
    return new StaffInfo(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.fullname = null;
    this.aliasName = null;
    setSexIsSet(false);
    this.sex = 0;
    this.email = null;
    this.phone = null;
    this.qq = null;
    this.wechat = null;
    this.jobLevel = null;
    setJobGroupIsSet(false);
    this.jobGroup = 0;
    setOnJobIsSet(false);
    this.onJob = false;
    setDepartmentIdIsSet(false);
    this.departmentId = 0;
    setCountryIdIsSet(false);
    this.countryId = 0;
    setCityIdIsSet(false);
    this.cityId = 0;
    this.gaeaAccount = null;
    this.employeeId = null;
    setIdentityIdIsSet(false);
    this.identityId = 0;
    this.address = null;
    this.joinTime = null;
  }

  public long getId() {
    return this.id;
  }

  public StaffInfo setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getFullname() {
    return this.fullname;
  }

  public StaffInfo setFullname(@org.apache.thrift.annotation.Nullable java.lang.String fullname) {
    this.fullname = fullname;
    return this;
  }

  public void unsetFullname() {
    this.fullname = null;
  }

  /** Returns true if field fullname is set (has been assigned a value) and false otherwise */
  public boolean isSetFullname() {
    return this.fullname != null;
  }

  public void setFullnameIsSet(boolean value) {
    if (!value) {
      this.fullname = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getAliasName() {
    return this.aliasName;
  }

  public StaffInfo setAliasName(@org.apache.thrift.annotation.Nullable java.lang.String aliasName) {
    this.aliasName = aliasName;
    return this;
  }

  public void unsetAliasName() {
    this.aliasName = null;
  }

  /** Returns true if field aliasName is set (has been assigned a value) and false otherwise */
  public boolean isSetAliasName() {
    return this.aliasName != null;
  }

  public void setAliasNameIsSet(boolean value) {
    if (!value) {
      this.aliasName = null;
    }
  }

  public short getSex() {
    return this.sex;
  }

  public StaffInfo setSex(short sex) {
    this.sex = sex;
    setSexIsSet(true);
    return this;
  }

  public void unsetSex() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SEX_ISSET_ID);
  }

  /** Returns true if field sex is set (has been assigned a value) and false otherwise */
  public boolean isSetSex() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SEX_ISSET_ID);
  }

  public void setSexIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SEX_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getEmail() {
    return this.email;
  }

  public StaffInfo setEmail(@org.apache.thrift.annotation.Nullable java.lang.String email) {
    this.email = email;
    return this;
  }

  public void unsetEmail() {
    this.email = null;
  }

  /** Returns true if field email is set (has been assigned a value) and false otherwise */
  public boolean isSetEmail() {
    return this.email != null;
  }

  public void setEmailIsSet(boolean value) {
    if (!value) {
      this.email = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPhone() {
    return this.phone;
  }

  public StaffInfo setPhone(@org.apache.thrift.annotation.Nullable java.lang.String phone) {
    this.phone = phone;
    return this;
  }

  public void unsetPhone() {
    this.phone = null;
  }

  /** Returns true if field phone is set (has been assigned a value) and false otherwise */
  public boolean isSetPhone() {
    return this.phone != null;
  }

  public void setPhoneIsSet(boolean value) {
    if (!value) {
      this.phone = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getQq() {
    return this.qq;
  }

  public StaffInfo setQq(@org.apache.thrift.annotation.Nullable java.lang.String qq) {
    this.qq = qq;
    return this;
  }

  public void unsetQq() {
    this.qq = null;
  }

  /** Returns true if field qq is set (has been assigned a value) and false otherwise */
  public boolean isSetQq() {
    return this.qq != null;
  }

  public void setQqIsSet(boolean value) {
    if (!value) {
      this.qq = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getWechat() {
    return this.wechat;
  }

  public StaffInfo setWechat(@org.apache.thrift.annotation.Nullable java.lang.String wechat) {
    this.wechat = wechat;
    return this;
  }

  public void unsetWechat() {
    this.wechat = null;
  }

  /** Returns true if field wechat is set (has been assigned a value) and false otherwise */
  public boolean isSetWechat() {
    return this.wechat != null;
  }

  public void setWechatIsSet(boolean value) {
    if (!value) {
      this.wechat = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getJobLevel() {
    return this.jobLevel;
  }

  public StaffInfo setJobLevel(@org.apache.thrift.annotation.Nullable java.lang.String jobLevel) {
    this.jobLevel = jobLevel;
    return this;
  }

  public void unsetJobLevel() {
    this.jobLevel = null;
  }

  /** Returns true if field jobLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetJobLevel() {
    return this.jobLevel != null;
  }

  public void setJobLevelIsSet(boolean value) {
    if (!value) {
      this.jobLevel = null;
    }
  }

  public int getJobGroup() {
    return this.jobGroup;
  }

  public StaffInfo setJobGroup(int jobGroup) {
    this.jobGroup = jobGroup;
    setJobGroupIsSet(true);
    return this;
  }

  public void unsetJobGroup() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __JOBGROUP_ISSET_ID);
  }

  /** Returns true if field jobGroup is set (has been assigned a value) and false otherwise */
  public boolean isSetJobGroup() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __JOBGROUP_ISSET_ID);
  }

  public void setJobGroupIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __JOBGROUP_ISSET_ID, value);
  }

  public boolean isOnJob() {
    return this.onJob;
  }

  public StaffInfo setOnJob(boolean onJob) {
    this.onJob = onJob;
    setOnJobIsSet(true);
    return this;
  }

  public void unsetOnJob() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ONJOB_ISSET_ID);
  }

  /** Returns true if field onJob is set (has been assigned a value) and false otherwise */
  public boolean isSetOnJob() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ONJOB_ISSET_ID);
  }

  public void setOnJobIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ONJOB_ISSET_ID, value);
  }

  public int getDepartmentId() {
    return this.departmentId;
  }

  public StaffInfo setDepartmentId(int departmentId) {
    this.departmentId = departmentId;
    setDepartmentIdIsSet(true);
    return this;
  }

  public void unsetDepartmentId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DEPARTMENTID_ISSET_ID);
  }

  /** Returns true if field departmentId is set (has been assigned a value) and false otherwise */
  public boolean isSetDepartmentId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DEPARTMENTID_ISSET_ID);
  }

  public void setDepartmentIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DEPARTMENTID_ISSET_ID, value);
  }

  public short getCountryId() {
    return this.countryId;
  }

  public StaffInfo setCountryId(short countryId) {
    this.countryId = countryId;
    setCountryIdIsSet(true);
    return this;
  }

  public void unsetCountryId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COUNTRYID_ISSET_ID);
  }

  /** Returns true if field countryId is set (has been assigned a value) and false otherwise */
  public boolean isSetCountryId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COUNTRYID_ISSET_ID);
  }

  public void setCountryIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COUNTRYID_ISSET_ID, value);
  }

  public int getCityId() {
    return this.cityId;
  }

  public StaffInfo setCityId(int cityId) {
    this.cityId = cityId;
    setCityIdIsSet(true);
    return this;
  }

  public void unsetCityId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CITYID_ISSET_ID);
  }

  /** Returns true if field cityId is set (has been assigned a value) and false otherwise */
  public boolean isSetCityId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CITYID_ISSET_ID);
  }

  public void setCityIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CITYID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getGaeaAccount() {
    return this.gaeaAccount;
  }

  public StaffInfo setGaeaAccount(@org.apache.thrift.annotation.Nullable java.lang.String gaeaAccount) {
    this.gaeaAccount = gaeaAccount;
    return this;
  }

  public void unsetGaeaAccount() {
    this.gaeaAccount = null;
  }

  /** Returns true if field gaeaAccount is set (has been assigned a value) and false otherwise */
  public boolean isSetGaeaAccount() {
    return this.gaeaAccount != null;
  }

  public void setGaeaAccountIsSet(boolean value) {
    if (!value) {
      this.gaeaAccount = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getEmployeeId() {
    return this.employeeId;
  }

  public StaffInfo setEmployeeId(@org.apache.thrift.annotation.Nullable java.lang.String employeeId) {
    this.employeeId = employeeId;
    return this;
  }

  public void unsetEmployeeId() {
    this.employeeId = null;
  }

  /** Returns true if field employeeId is set (has been assigned a value) and false otherwise */
  public boolean isSetEmployeeId() {
    return this.employeeId != null;
  }

  public void setEmployeeIdIsSet(boolean value) {
    if (!value) {
      this.employeeId = null;
    }
  }

  public int getIdentityId() {
    return this.identityId;
  }

  public StaffInfo setIdentityId(int identityId) {
    this.identityId = identityId;
    setIdentityIdIsSet(true);
    return this;
  }

  public void unsetIdentityId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IDENTITYID_ISSET_ID);
  }

  /** Returns true if field identityId is set (has been assigned a value) and false otherwise */
  public boolean isSetIdentityId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IDENTITYID_ISSET_ID);
  }

  public void setIdentityIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IDENTITYID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getAddress() {
    return this.address;
  }

  public StaffInfo setAddress(@org.apache.thrift.annotation.Nullable java.lang.String address) {
    this.address = address;
    return this;
  }

  public void unsetAddress() {
    this.address = null;
  }

  /** Returns true if field address is set (has been assigned a value) and false otherwise */
  public boolean isSetAddress() {
    return this.address != null;
  }

  public void setAddressIsSet(boolean value) {
    if (!value) {
      this.address = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getJoinTime() {
    return this.joinTime;
  }

  public StaffInfo setJoinTime(@org.apache.thrift.annotation.Nullable java.lang.String joinTime) {
    this.joinTime = joinTime;
    return this;
  }

  public void unsetJoinTime() {
    this.joinTime = null;
  }

  /** Returns true if field joinTime is set (has been assigned a value) and false otherwise */
  public boolean isSetJoinTime() {
    return this.joinTime != null;
  }

  public void setJoinTimeIsSet(boolean value) {
    if (!value) {
      this.joinTime = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Long)value);
      }
      break;

    case FULLNAME:
      if (value == null) {
        unsetFullname();
      } else {
        setFullname((java.lang.String)value);
      }
      break;

    case ALIAS_NAME:
      if (value == null) {
        unsetAliasName();
      } else {
        setAliasName((java.lang.String)value);
      }
      break;

    case SEX:
      if (value == null) {
        unsetSex();
      } else {
        setSex((java.lang.Short)value);
      }
      break;

    case EMAIL:
      if (value == null) {
        unsetEmail();
      } else {
        setEmail((java.lang.String)value);
      }
      break;

    case PHONE:
      if (value == null) {
        unsetPhone();
      } else {
        setPhone((java.lang.String)value);
      }
      break;

    case QQ:
      if (value == null) {
        unsetQq();
      } else {
        setQq((java.lang.String)value);
      }
      break;

    case WECHAT:
      if (value == null) {
        unsetWechat();
      } else {
        setWechat((java.lang.String)value);
      }
      break;

    case JOB_LEVEL:
      if (value == null) {
        unsetJobLevel();
      } else {
        setJobLevel((java.lang.String)value);
      }
      break;

    case JOB_GROUP:
      if (value == null) {
        unsetJobGroup();
      } else {
        setJobGroup((java.lang.Integer)value);
      }
      break;

    case ON_JOB:
      if (value == null) {
        unsetOnJob();
      } else {
        setOnJob((java.lang.Boolean)value);
      }
      break;

    case DEPARTMENT_ID:
      if (value == null) {
        unsetDepartmentId();
      } else {
        setDepartmentId((java.lang.Integer)value);
      }
      break;

    case COUNTRY_ID:
      if (value == null) {
        unsetCountryId();
      } else {
        setCountryId((java.lang.Short)value);
      }
      break;

    case CITY_ID:
      if (value == null) {
        unsetCityId();
      } else {
        setCityId((java.lang.Integer)value);
      }
      break;

    case GAEA_ACCOUNT:
      if (value == null) {
        unsetGaeaAccount();
      } else {
        setGaeaAccount((java.lang.String)value);
      }
      break;

    case EMPLOYEE_ID:
      if (value == null) {
        unsetEmployeeId();
      } else {
        setEmployeeId((java.lang.String)value);
      }
      break;

    case IDENTITY_ID:
      if (value == null) {
        unsetIdentityId();
      } else {
        setIdentityId((java.lang.Integer)value);
      }
      break;

    case ADDRESS:
      if (value == null) {
        unsetAddress();
      } else {
        setAddress((java.lang.String)value);
      }
      break;

    case JOIN_TIME:
      if (value == null) {
        unsetJoinTime();
      } else {
        setJoinTime((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case FULLNAME:
      return getFullname();

    case ALIAS_NAME:
      return getAliasName();

    case SEX:
      return getSex();

    case EMAIL:
      return getEmail();

    case PHONE:
      return getPhone();

    case QQ:
      return getQq();

    case WECHAT:
      return getWechat();

    case JOB_LEVEL:
      return getJobLevel();

    case JOB_GROUP:
      return getJobGroup();

    case ON_JOB:
      return isOnJob();

    case DEPARTMENT_ID:
      return getDepartmentId();

    case COUNTRY_ID:
      return getCountryId();

    case CITY_ID:
      return getCityId();

    case GAEA_ACCOUNT:
      return getGaeaAccount();

    case EMPLOYEE_ID:
      return getEmployeeId();

    case IDENTITY_ID:
      return getIdentityId();

    case ADDRESS:
      return getAddress();

    case JOIN_TIME:
      return getJoinTime();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case FULLNAME:
      return isSetFullname();
    case ALIAS_NAME:
      return isSetAliasName();
    case SEX:
      return isSetSex();
    case EMAIL:
      return isSetEmail();
    case PHONE:
      return isSetPhone();
    case QQ:
      return isSetQq();
    case WECHAT:
      return isSetWechat();
    case JOB_LEVEL:
      return isSetJobLevel();
    case JOB_GROUP:
      return isSetJobGroup();
    case ON_JOB:
      return isSetOnJob();
    case DEPARTMENT_ID:
      return isSetDepartmentId();
    case COUNTRY_ID:
      return isSetCountryId();
    case CITY_ID:
      return isSetCityId();
    case GAEA_ACCOUNT:
      return isSetGaeaAccount();
    case EMPLOYEE_ID:
      return isSetEmployeeId();
    case IDENTITY_ID:
      return isSetIdentityId();
    case ADDRESS:
      return isSetAddress();
    case JOIN_TIME:
      return isSetJoinTime();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof StaffInfo)
      return this.equals((StaffInfo)that);
    return false;
  }

  public boolean equals(StaffInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_fullname = true && this.isSetFullname();
    boolean that_present_fullname = true && that.isSetFullname();
    if (this_present_fullname || that_present_fullname) {
      if (!(this_present_fullname && that_present_fullname))
        return false;
      if (!this.fullname.equals(that.fullname))
        return false;
    }

    boolean this_present_aliasName = true && this.isSetAliasName();
    boolean that_present_aliasName = true && that.isSetAliasName();
    if (this_present_aliasName || that_present_aliasName) {
      if (!(this_present_aliasName && that_present_aliasName))
        return false;
      if (!this.aliasName.equals(that.aliasName))
        return false;
    }

    boolean this_present_sex = true && this.isSetSex();
    boolean that_present_sex = true && that.isSetSex();
    if (this_present_sex || that_present_sex) {
      if (!(this_present_sex && that_present_sex))
        return false;
      if (this.sex != that.sex)
        return false;
    }

    boolean this_present_email = true && this.isSetEmail();
    boolean that_present_email = true && that.isSetEmail();
    if (this_present_email || that_present_email) {
      if (!(this_present_email && that_present_email))
        return false;
      if (!this.email.equals(that.email))
        return false;
    }

    boolean this_present_phone = true && this.isSetPhone();
    boolean that_present_phone = true && that.isSetPhone();
    if (this_present_phone || that_present_phone) {
      if (!(this_present_phone && that_present_phone))
        return false;
      if (!this.phone.equals(that.phone))
        return false;
    }

    boolean this_present_qq = true && this.isSetQq();
    boolean that_present_qq = true && that.isSetQq();
    if (this_present_qq || that_present_qq) {
      if (!(this_present_qq && that_present_qq))
        return false;
      if (!this.qq.equals(that.qq))
        return false;
    }

    boolean this_present_wechat = true && this.isSetWechat();
    boolean that_present_wechat = true && that.isSetWechat();
    if (this_present_wechat || that_present_wechat) {
      if (!(this_present_wechat && that_present_wechat))
        return false;
      if (!this.wechat.equals(that.wechat))
        return false;
    }

    boolean this_present_jobLevel = true && this.isSetJobLevel();
    boolean that_present_jobLevel = true && that.isSetJobLevel();
    if (this_present_jobLevel || that_present_jobLevel) {
      if (!(this_present_jobLevel && that_present_jobLevel))
        return false;
      if (!this.jobLevel.equals(that.jobLevel))
        return false;
    }

    boolean this_present_jobGroup = true && this.isSetJobGroup();
    boolean that_present_jobGroup = true && that.isSetJobGroup();
    if (this_present_jobGroup || that_present_jobGroup) {
      if (!(this_present_jobGroup && that_present_jobGroup))
        return false;
      if (this.jobGroup != that.jobGroup)
        return false;
    }

    boolean this_present_onJob = true && this.isSetOnJob();
    boolean that_present_onJob = true && that.isSetOnJob();
    if (this_present_onJob || that_present_onJob) {
      if (!(this_present_onJob && that_present_onJob))
        return false;
      if (this.onJob != that.onJob)
        return false;
    }

    boolean this_present_departmentId = true && this.isSetDepartmentId();
    boolean that_present_departmentId = true && that.isSetDepartmentId();
    if (this_present_departmentId || that_present_departmentId) {
      if (!(this_present_departmentId && that_present_departmentId))
        return false;
      if (this.departmentId != that.departmentId)
        return false;
    }

    boolean this_present_countryId = true && this.isSetCountryId();
    boolean that_present_countryId = true && that.isSetCountryId();
    if (this_present_countryId || that_present_countryId) {
      if (!(this_present_countryId && that_present_countryId))
        return false;
      if (this.countryId != that.countryId)
        return false;
    }

    boolean this_present_cityId = true && this.isSetCityId();
    boolean that_present_cityId = true && that.isSetCityId();
    if (this_present_cityId || that_present_cityId) {
      if (!(this_present_cityId && that_present_cityId))
        return false;
      if (this.cityId != that.cityId)
        return false;
    }

    boolean this_present_gaeaAccount = true && this.isSetGaeaAccount();
    boolean that_present_gaeaAccount = true && that.isSetGaeaAccount();
    if (this_present_gaeaAccount || that_present_gaeaAccount) {
      if (!(this_present_gaeaAccount && that_present_gaeaAccount))
        return false;
      if (!this.gaeaAccount.equals(that.gaeaAccount))
        return false;
    }

    boolean this_present_employeeId = true && this.isSetEmployeeId();
    boolean that_present_employeeId = true && that.isSetEmployeeId();
    if (this_present_employeeId || that_present_employeeId) {
      if (!(this_present_employeeId && that_present_employeeId))
        return false;
      if (!this.employeeId.equals(that.employeeId))
        return false;
    }

    boolean this_present_identityId = true && this.isSetIdentityId();
    boolean that_present_identityId = true && that.isSetIdentityId();
    if (this_present_identityId || that_present_identityId) {
      if (!(this_present_identityId && that_present_identityId))
        return false;
      if (this.identityId != that.identityId)
        return false;
    }

    boolean this_present_address = true && this.isSetAddress();
    boolean that_present_address = true && that.isSetAddress();
    if (this_present_address || that_present_address) {
      if (!(this_present_address && that_present_address))
        return false;
      if (!this.address.equals(that.address))
        return false;
    }

    boolean this_present_joinTime = true && this.isSetJoinTime();
    boolean that_present_joinTime = true && that.isSetJoinTime();
    if (this_present_joinTime || that_present_joinTime) {
      if (!(this_present_joinTime && that_present_joinTime))
        return false;
      if (!this.joinTime.equals(that.joinTime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(id);

    hashCode = hashCode * 8191 + ((isSetFullname()) ? 131071 : 524287);
    if (isSetFullname())
      hashCode = hashCode * 8191 + fullname.hashCode();

    hashCode = hashCode * 8191 + ((isSetAliasName()) ? 131071 : 524287);
    if (isSetAliasName())
      hashCode = hashCode * 8191 + aliasName.hashCode();

    hashCode = hashCode * 8191 + ((isSetSex()) ? 131071 : 524287);
    if (isSetSex())
      hashCode = hashCode * 8191 + sex;

    hashCode = hashCode * 8191 + ((isSetEmail()) ? 131071 : 524287);
    if (isSetEmail())
      hashCode = hashCode * 8191 + email.hashCode();

    hashCode = hashCode * 8191 + ((isSetPhone()) ? 131071 : 524287);
    if (isSetPhone())
      hashCode = hashCode * 8191 + phone.hashCode();

    hashCode = hashCode * 8191 + ((isSetQq()) ? 131071 : 524287);
    if (isSetQq())
      hashCode = hashCode * 8191 + qq.hashCode();

    hashCode = hashCode * 8191 + ((isSetWechat()) ? 131071 : 524287);
    if (isSetWechat())
      hashCode = hashCode * 8191 + wechat.hashCode();

    hashCode = hashCode * 8191 + ((isSetJobLevel()) ? 131071 : 524287);
    if (isSetJobLevel())
      hashCode = hashCode * 8191 + jobLevel.hashCode();

    hashCode = hashCode * 8191 + ((isSetJobGroup()) ? 131071 : 524287);
    if (isSetJobGroup())
      hashCode = hashCode * 8191 + jobGroup;

    hashCode = hashCode * 8191 + ((isSetOnJob()) ? 131071 : 524287);
    if (isSetOnJob())
      hashCode = hashCode * 8191 + ((onJob) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetDepartmentId()) ? 131071 : 524287);
    if (isSetDepartmentId())
      hashCode = hashCode * 8191 + departmentId;

    hashCode = hashCode * 8191 + ((isSetCountryId()) ? 131071 : 524287);
    if (isSetCountryId())
      hashCode = hashCode * 8191 + countryId;

    hashCode = hashCode * 8191 + ((isSetCityId()) ? 131071 : 524287);
    if (isSetCityId())
      hashCode = hashCode * 8191 + cityId;

    hashCode = hashCode * 8191 + ((isSetGaeaAccount()) ? 131071 : 524287);
    if (isSetGaeaAccount())
      hashCode = hashCode * 8191 + gaeaAccount.hashCode();

    hashCode = hashCode * 8191 + ((isSetEmployeeId()) ? 131071 : 524287);
    if (isSetEmployeeId())
      hashCode = hashCode * 8191 + employeeId.hashCode();

    hashCode = hashCode * 8191 + ((isSetIdentityId()) ? 131071 : 524287);
    if (isSetIdentityId())
      hashCode = hashCode * 8191 + identityId;

    hashCode = hashCode * 8191 + ((isSetAddress()) ? 131071 : 524287);
    if (isSetAddress())
      hashCode = hashCode * 8191 + address.hashCode();

    hashCode = hashCode * 8191 + ((isSetJoinTime()) ? 131071 : 524287);
    if (isSetJoinTime())
      hashCode = hashCode * 8191 + joinTime.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(StaffInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFullname()).compareTo(other.isSetFullname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFullname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fullname, other.fullname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAliasName()).compareTo(other.isSetAliasName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAliasName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aliasName, other.aliasName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSex()).compareTo(other.isSetSex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sex, other.sex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEmail()).compareTo(other.isSetEmail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email, other.email);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPhone()).compareTo(other.isSetPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phone, other.phone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetQq()).compareTo(other.isSetQq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qq, other.qq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetWechat()).compareTo(other.isSetWechat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWechat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wechat, other.wechat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetJobLevel()).compareTo(other.isSetJobLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobLevel, other.jobLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetJobGroup()).compareTo(other.isSetJobGroup());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobGroup()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobGroup, other.jobGroup);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOnJob()).compareTo(other.isSetOnJob());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOnJob()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.onJob, other.onJob);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDepartmentId()).compareTo(other.isSetDepartmentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDepartmentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.departmentId, other.departmentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCountryId()).compareTo(other.isSetCountryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCountryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.countryId, other.countryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCityId()).compareTo(other.isSetCityId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCityId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cityId, other.cityId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetGaeaAccount()).compareTo(other.isSetGaeaAccount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGaeaAccount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gaeaAccount, other.gaeaAccount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEmployeeId()).compareTo(other.isSetEmployeeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmployeeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.employeeId, other.employeeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIdentityId()).compareTo(other.isSetIdentityId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdentityId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identityId, other.identityId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAddress()).compareTo(other.isSetAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.address, other.address);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetJoinTime()).compareTo(other.isSetJoinTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJoinTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.joinTime, other.joinTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("StaffInfo(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetFullname()) {
      if (!first) sb.append(", ");
      sb.append("fullname:");
      if (this.fullname == null) {
        sb.append("null");
      } else {
        sb.append(this.fullname);
      }
      first = false;
    }
    if (isSetAliasName()) {
      if (!first) sb.append(", ");
      sb.append("aliasName:");
      if (this.aliasName == null) {
        sb.append("null");
      } else {
        sb.append(this.aliasName);
      }
      first = false;
    }
    if (isSetSex()) {
      if (!first) sb.append(", ");
      sb.append("sex:");
      sb.append(this.sex);
      first = false;
    }
    if (isSetEmail()) {
      if (!first) sb.append(", ");
      sb.append("email:");
      if (this.email == null) {
        sb.append("null");
      } else {
        sb.append(this.email);
      }
      first = false;
    }
    if (isSetPhone()) {
      if (!first) sb.append(", ");
      sb.append("phone:");
      if (this.phone == null) {
        sb.append("null");
      } else {
        sb.append(this.phone);
      }
      first = false;
    }
    if (isSetQq()) {
      if (!first) sb.append(", ");
      sb.append("qq:");
      if (this.qq == null) {
        sb.append("null");
      } else {
        sb.append(this.qq);
      }
      first = false;
    }
    if (isSetWechat()) {
      if (!first) sb.append(", ");
      sb.append("wechat:");
      if (this.wechat == null) {
        sb.append("null");
      } else {
        sb.append(this.wechat);
      }
      first = false;
    }
    if (isSetJobLevel()) {
      if (!first) sb.append(", ");
      sb.append("jobLevel:");
      if (this.jobLevel == null) {
        sb.append("null");
      } else {
        sb.append(this.jobLevel);
      }
      first = false;
    }
    if (isSetJobGroup()) {
      if (!first) sb.append(", ");
      sb.append("jobGroup:");
      sb.append(this.jobGroup);
      first = false;
    }
    if (isSetOnJob()) {
      if (!first) sb.append(", ");
      sb.append("onJob:");
      sb.append(this.onJob);
      first = false;
    }
    if (isSetDepartmentId()) {
      if (!first) sb.append(", ");
      sb.append("departmentId:");
      sb.append(this.departmentId);
      first = false;
    }
    if (isSetCountryId()) {
      if (!first) sb.append(", ");
      sb.append("countryId:");
      sb.append(this.countryId);
      first = false;
    }
    if (isSetCityId()) {
      if (!first) sb.append(", ");
      sb.append("cityId:");
      sb.append(this.cityId);
      first = false;
    }
    if (isSetGaeaAccount()) {
      if (!first) sb.append(", ");
      sb.append("gaeaAccount:");
      if (this.gaeaAccount == null) {
        sb.append("null");
      } else {
        sb.append(this.gaeaAccount);
      }
      first = false;
    }
    if (isSetEmployeeId()) {
      if (!first) sb.append(", ");
      sb.append("employeeId:");
      if (this.employeeId == null) {
        sb.append("null");
      } else {
        sb.append(this.employeeId);
      }
      first = false;
    }
    if (isSetIdentityId()) {
      if (!first) sb.append(", ");
      sb.append("identityId:");
      sb.append(this.identityId);
      first = false;
    }
    if (isSetAddress()) {
      if (!first) sb.append(", ");
      sb.append("address:");
      if (this.address == null) {
        sb.append("null");
      } else {
        sb.append(this.address);
      }
      first = false;
    }
    if (isSetJoinTime()) {
      if (!first) sb.append(", ");
      sb.append("joinTime:");
      if (this.joinTime == null) {
        sb.append("null");
      } else {
        sb.append(this.joinTime);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StaffInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public StaffInfoStandardScheme getScheme() {
      return new StaffInfoStandardScheme();
    }
  }

  private static class StaffInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<StaffInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StaffInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FULLNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fullname = iprot.readString();
              struct.setFullnameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ALIAS_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.aliasName = iprot.readString();
              struct.setAliasNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.sex = iprot.readI16();
              struct.setSexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // EMAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.email = iprot.readString();
              struct.setEmailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.phone = iprot.readString();
              struct.setPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // QQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.qq = iprot.readString();
              struct.setQqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // WECHAT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.wechat = iprot.readString();
              struct.setWechatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // JOB_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.jobLevel = iprot.readString();
              struct.setJobLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // JOB_GROUP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.jobGroup = iprot.readI32();
              struct.setJobGroupIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ON_JOB
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.onJob = iprot.readBool();
              struct.setOnJobIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // DEPARTMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.departmentId = iprot.readI32();
              struct.setDepartmentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // COUNTRY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.countryId = iprot.readI16();
              struct.setCountryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CITY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cityId = iprot.readI32();
              struct.setCityIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // GAEA_ACCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.gaeaAccount = iprot.readString();
              struct.setGaeaAccountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // EMPLOYEE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.employeeId = iprot.readString();
              struct.setEmployeeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // IDENTITY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.identityId = iprot.readI32();
              struct.setIdentityIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.address = iprot.readString();
              struct.setAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // JOIN_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.joinTime = iprot.readString();
              struct.setJoinTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StaffInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.fullname != null) {
        if (struct.isSetFullname()) {
          oprot.writeFieldBegin(FULLNAME_FIELD_DESC);
          oprot.writeString(struct.fullname);
          oprot.writeFieldEnd();
        }
      }
      if (struct.aliasName != null) {
        if (struct.isSetAliasName()) {
          oprot.writeFieldBegin(ALIAS_NAME_FIELD_DESC);
          oprot.writeString(struct.aliasName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSex()) {
        oprot.writeFieldBegin(SEX_FIELD_DESC);
        oprot.writeI16(struct.sex);
        oprot.writeFieldEnd();
      }
      if (struct.email != null) {
        if (struct.isSetEmail()) {
          oprot.writeFieldBegin(EMAIL_FIELD_DESC);
          oprot.writeString(struct.email);
          oprot.writeFieldEnd();
        }
      }
      if (struct.phone != null) {
        if (struct.isSetPhone()) {
          oprot.writeFieldBegin(PHONE_FIELD_DESC);
          oprot.writeString(struct.phone);
          oprot.writeFieldEnd();
        }
      }
      if (struct.qq != null) {
        if (struct.isSetQq()) {
          oprot.writeFieldBegin(QQ_FIELD_DESC);
          oprot.writeString(struct.qq);
          oprot.writeFieldEnd();
        }
      }
      if (struct.wechat != null) {
        if (struct.isSetWechat()) {
          oprot.writeFieldBegin(WECHAT_FIELD_DESC);
          oprot.writeString(struct.wechat);
          oprot.writeFieldEnd();
        }
      }
      if (struct.jobLevel != null) {
        if (struct.isSetJobLevel()) {
          oprot.writeFieldBegin(JOB_LEVEL_FIELD_DESC);
          oprot.writeString(struct.jobLevel);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetJobGroup()) {
        oprot.writeFieldBegin(JOB_GROUP_FIELD_DESC);
        oprot.writeI32(struct.jobGroup);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOnJob()) {
        oprot.writeFieldBegin(ON_JOB_FIELD_DESC);
        oprot.writeBool(struct.onJob);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDepartmentId()) {
        oprot.writeFieldBegin(DEPARTMENT_ID_FIELD_DESC);
        oprot.writeI32(struct.departmentId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCountryId()) {
        oprot.writeFieldBegin(COUNTRY_ID_FIELD_DESC);
        oprot.writeI16(struct.countryId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCityId()) {
        oprot.writeFieldBegin(CITY_ID_FIELD_DESC);
        oprot.writeI32(struct.cityId);
        oprot.writeFieldEnd();
      }
      if (struct.gaeaAccount != null) {
        if (struct.isSetGaeaAccount()) {
          oprot.writeFieldBegin(GAEA_ACCOUNT_FIELD_DESC);
          oprot.writeString(struct.gaeaAccount);
          oprot.writeFieldEnd();
        }
      }
      if (struct.employeeId != null) {
        if (struct.isSetEmployeeId()) {
          oprot.writeFieldBegin(EMPLOYEE_ID_FIELD_DESC);
          oprot.writeString(struct.employeeId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIdentityId()) {
        oprot.writeFieldBegin(IDENTITY_ID_FIELD_DESC);
        oprot.writeI32(struct.identityId);
        oprot.writeFieldEnd();
      }
      if (struct.address != null) {
        if (struct.isSetAddress()) {
          oprot.writeFieldBegin(ADDRESS_FIELD_DESC);
          oprot.writeString(struct.address);
          oprot.writeFieldEnd();
        }
      }
      if (struct.joinTime != null) {
        if (struct.isSetJoinTime()) {
          oprot.writeFieldBegin(JOIN_TIME_FIELD_DESC);
          oprot.writeString(struct.joinTime);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StaffInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public StaffInfoTupleScheme getScheme() {
      return new StaffInfoTupleScheme();
    }
  }

  private static class StaffInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<StaffInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StaffInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetFullname()) {
        optionals.set(1);
      }
      if (struct.isSetAliasName()) {
        optionals.set(2);
      }
      if (struct.isSetSex()) {
        optionals.set(3);
      }
      if (struct.isSetEmail()) {
        optionals.set(4);
      }
      if (struct.isSetPhone()) {
        optionals.set(5);
      }
      if (struct.isSetQq()) {
        optionals.set(6);
      }
      if (struct.isSetWechat()) {
        optionals.set(7);
      }
      if (struct.isSetJobLevel()) {
        optionals.set(8);
      }
      if (struct.isSetJobGroup()) {
        optionals.set(9);
      }
      if (struct.isSetOnJob()) {
        optionals.set(10);
      }
      if (struct.isSetDepartmentId()) {
        optionals.set(11);
      }
      if (struct.isSetCountryId()) {
        optionals.set(12);
      }
      if (struct.isSetCityId()) {
        optionals.set(13);
      }
      if (struct.isSetGaeaAccount()) {
        optionals.set(14);
      }
      if (struct.isSetEmployeeId()) {
        optionals.set(15);
      }
      if (struct.isSetIdentityId()) {
        optionals.set(16);
      }
      if (struct.isSetAddress()) {
        optionals.set(17);
      }
      if (struct.isSetJoinTime()) {
        optionals.set(18);
      }
      oprot.writeBitSet(optionals, 19);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetFullname()) {
        oprot.writeString(struct.fullname);
      }
      if (struct.isSetAliasName()) {
        oprot.writeString(struct.aliasName);
      }
      if (struct.isSetSex()) {
        oprot.writeI16(struct.sex);
      }
      if (struct.isSetEmail()) {
        oprot.writeString(struct.email);
      }
      if (struct.isSetPhone()) {
        oprot.writeString(struct.phone);
      }
      if (struct.isSetQq()) {
        oprot.writeString(struct.qq);
      }
      if (struct.isSetWechat()) {
        oprot.writeString(struct.wechat);
      }
      if (struct.isSetJobLevel()) {
        oprot.writeString(struct.jobLevel);
      }
      if (struct.isSetJobGroup()) {
        oprot.writeI32(struct.jobGroup);
      }
      if (struct.isSetOnJob()) {
        oprot.writeBool(struct.onJob);
      }
      if (struct.isSetDepartmentId()) {
        oprot.writeI32(struct.departmentId);
      }
      if (struct.isSetCountryId()) {
        oprot.writeI16(struct.countryId);
      }
      if (struct.isSetCityId()) {
        oprot.writeI32(struct.cityId);
      }
      if (struct.isSetGaeaAccount()) {
        oprot.writeString(struct.gaeaAccount);
      }
      if (struct.isSetEmployeeId()) {
        oprot.writeString(struct.employeeId);
      }
      if (struct.isSetIdentityId()) {
        oprot.writeI32(struct.identityId);
      }
      if (struct.isSetAddress()) {
        oprot.writeString(struct.address);
      }
      if (struct.isSetJoinTime()) {
        oprot.writeString(struct.joinTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StaffInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(19);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.fullname = iprot.readString();
        struct.setFullnameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.aliasName = iprot.readString();
        struct.setAliasNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.sex = iprot.readI16();
        struct.setSexIsSet(true);
      }
      if (incoming.get(4)) {
        struct.email = iprot.readString();
        struct.setEmailIsSet(true);
      }
      if (incoming.get(5)) {
        struct.phone = iprot.readString();
        struct.setPhoneIsSet(true);
      }
      if (incoming.get(6)) {
        struct.qq = iprot.readString();
        struct.setQqIsSet(true);
      }
      if (incoming.get(7)) {
        struct.wechat = iprot.readString();
        struct.setWechatIsSet(true);
      }
      if (incoming.get(8)) {
        struct.jobLevel = iprot.readString();
        struct.setJobLevelIsSet(true);
      }
      if (incoming.get(9)) {
        struct.jobGroup = iprot.readI32();
        struct.setJobGroupIsSet(true);
      }
      if (incoming.get(10)) {
        struct.onJob = iprot.readBool();
        struct.setOnJobIsSet(true);
      }
      if (incoming.get(11)) {
        struct.departmentId = iprot.readI32();
        struct.setDepartmentIdIsSet(true);
      }
      if (incoming.get(12)) {
        struct.countryId = iprot.readI16();
        struct.setCountryIdIsSet(true);
      }
      if (incoming.get(13)) {
        struct.cityId = iprot.readI32();
        struct.setCityIdIsSet(true);
      }
      if (incoming.get(14)) {
        struct.gaeaAccount = iprot.readString();
        struct.setGaeaAccountIsSet(true);
      }
      if (incoming.get(15)) {
        struct.employeeId = iprot.readString();
        struct.setEmployeeIdIsSet(true);
      }
      if (incoming.get(16)) {
        struct.identityId = iprot.readI32();
        struct.setIdentityIdIsSet(true);
      }
      if (incoming.get(17)) {
        struct.address = iprot.readString();
        struct.setAddressIsSet(true);
      }
      if (incoming.get(18)) {
        struct.joinTime = iprot.readString();
        struct.setJoinTimeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

