/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.aries.department.athena.contract.thrift.service;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-05-05")
public class DepartmentService {

  public interface Iface {

    public java.lang.String ping() throws org.apache.thrift.TException;

    public com.aries.department.athena.contract.thrift.dto.AthenaResponse addDepartment(com.aries.department.athena.contract.thrift.dto.CompanyInfo companyInfo, com.aries.department.athena.contract.thrift.dto.DepartmentInfo departmentInfo) throws org.apache.thrift.TException;

    public com.aries.department.athena.contract.thrift.dto.DepartmentInfo getDepartmentById(com.aries.department.athena.contract.thrift.dto.CompanyInfo companyInfo, long departmentId) throws org.apache.thrift.TException;

    public java.util.List<com.aries.department.athena.contract.thrift.dto.DepartmentInfo> getRootDepartments(com.aries.department.athena.contract.thrift.dto.CompanyInfo companyInfo) throws org.apache.thrift.TException;

    public java.util.List<com.aries.department.athena.contract.thrift.dto.DepartmentInfo> getSubDepartments(com.aries.department.athena.contract.thrift.dto.CompanyInfo companyInfo, long subDepartmentId) throws org.apache.thrift.TException;

    public com.aries.department.athena.contract.thrift.dto.AthenaResponse updateDepartmentNameById(com.aries.department.athena.contract.thrift.dto.CompanyInfo companyInfo, long departmentId, java.lang.String newDepartmentName) throws org.apache.thrift.TException;

    public com.aries.department.athena.contract.thrift.dto.AthenaResponse updateDepartmentLeaderById(com.aries.department.athena.contract.thrift.dto.CompanyInfo companyInfo, long departmentId, long leaderId) throws org.apache.thrift.TException;

    public com.aries.department.athena.contract.thrift.dto.AthenaResponse updateSupDepartmentById(com.aries.department.athena.contract.thrift.dto.CompanyInfo companyInfo, long departmentId, long supDepartmentId) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void ping(org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void addDepartment(com.aries.department.athena.contract.thrift.dto.CompanyInfo companyInfo, com.aries.department.athena.contract.thrift.dto.DepartmentInfo departmentInfo, org.apache.thrift.async.AsyncMethodCallback<com.aries.department.athena.contract.thrift.dto.AthenaResponse> resultHandler) throws org.apache.thrift.TException;

    public void getDepartmentById(com.aries.department.athena.contract.thrift.dto.CompanyInfo companyInfo, long departmentId, org.apache.thrift.async.AsyncMethodCallback<com.aries.department.athena.contract.thrift.dto.DepartmentInfo> resultHandler) throws org.apache.thrift.TException;

    public void getRootDepartments(com.aries.department.athena.contract.thrift.dto.CompanyInfo companyInfo, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.aries.department.athena.contract.thrift.dto.DepartmentInfo>> resultHandler) throws org.apache.thrift.TException;

    public void getSubDepartments(com.aries.department.athena.contract.thrift.dto.CompanyInfo companyInfo, long subDepartmentId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.aries.department.athena.contract.thrift.dto.DepartmentInfo>> resultHandler) throws org.apache.thrift.TException;

    public void updateDepartmentNameById(com.aries.department.athena.contract.thrift.dto.CompanyInfo companyInfo, long departmentId, java.lang.String newDepartmentName, org.apache.thrift.async.AsyncMethodCallback<com.aries.department.athena.contract.thrift.dto.AthenaResponse> resultHandler) throws org.apache.thrift.TException;

    public void updateDepartmentLeaderById(com.aries.department.athena.contract.thrift.dto.CompanyInfo companyInfo, long departmentId, long leaderId, org.apache.thrift.async.AsyncMethodCallback<com.aries.department.athena.contract.thrift.dto.AthenaResponse> resultHandler) throws org.apache.thrift.TException;

    public void updateSupDepartmentById(com.aries.department.athena.contract.thrift.dto.CompanyInfo companyInfo, long departmentId, long supDepartmentId, org.apache.thrift.async.AsyncMethodCallback<com.aries.department.athena.contract.thrift.dto.AthenaResponse> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public java.lang.String ping() throws org.apache.thrift.TException
    {
      send_ping();
      return recv_ping();
    }

    public void send_ping() throws org.apache.thrift.TException
    {
      ping_args args = new ping_args();
      sendBase("ping", args);
    }

    public java.lang.String recv_ping() throws org.apache.thrift.TException
    {
      ping_result result = new ping_result();
      receiveBase(result, "ping");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ping failed: unknown result");
    }

    public com.aries.department.athena.contract.thrift.dto.AthenaResponse addDepartment(com.aries.department.athena.contract.thrift.dto.CompanyInfo companyInfo, com.aries.department.athena.contract.thrift.dto.DepartmentInfo departmentInfo) throws org.apache.thrift.TException
    {
      send_addDepartment(companyInfo, departmentInfo);
      return recv_addDepartment();
    }

    public void send_addDepartment(com.aries.department.athena.contract.thrift.dto.CompanyInfo companyInfo, com.aries.department.athena.contract.thrift.dto.DepartmentInfo departmentInfo) throws org.apache.thrift.TException
    {
      addDepartment_args args = new addDepartment_args();
      args.setCompanyInfo(companyInfo);
      args.setDepartmentInfo(departmentInfo);
      sendBase("addDepartment", args);
    }

    public com.aries.department.athena.contract.thrift.dto.AthenaResponse recv_addDepartment() throws org.apache.thrift.TException
    {
      addDepartment_result result = new addDepartment_result();
      receiveBase(result, "addDepartment");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addDepartment failed: unknown result");
    }

    public com.aries.department.athena.contract.thrift.dto.DepartmentInfo getDepartmentById(com.aries.department.athena.contract.thrift.dto.CompanyInfo companyInfo, long departmentId) throws org.apache.thrift.TException
    {
      send_getDepartmentById(companyInfo, departmentId);
      return recv_getDepartmentById();
    }

    public void send_getDepartmentById(com.aries.department.athena.contract.thrift.dto.CompanyInfo companyInfo, long departmentId) throws org.apache.thrift.TException
    {
      getDepartmentById_args args = new getDepartmentById_args();
      args.setCompanyInfo(companyInfo);
      args.setDepartmentId(departmentId);
      sendBase("getDepartmentById", args);
    }

    public com.aries.department.athena.contract.thrift.dto.DepartmentInfo recv_getDepartmentById() throws org.apache.thrift.TException
    {
      getDepartmentById_result result = new getDepartmentById_result();
      receiveBase(result, "getDepartmentById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDepartmentById failed: unknown result");
    }

    public java.util.List<com.aries.department.athena.contract.thrift.dto.DepartmentInfo> getRootDepartments(com.aries.department.athena.contract.thrift.dto.CompanyInfo companyInfo) throws org.apache.thrift.TException
    {
      send_getRootDepartments(companyInfo);
      return recv_getRootDepartments();
    }

    public void send_getRootDepartments(com.aries.department.athena.contract.thrift.dto.CompanyInfo companyInfo) throws org.apache.thrift.TException
    {
      getRootDepartments_args args = new getRootDepartments_args();
      args.setCompanyInfo(companyInfo);
      sendBase("getRootDepartments", args);
    }

    public java.util.List<com.aries.department.athena.contract.thrift.dto.DepartmentInfo> recv_getRootDepartments() throws org.apache.thrift.TException
    {
      getRootDepartments_result result = new getRootDepartments_result();
      receiveBase(result, "getRootDepartments");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRootDepartments failed: unknown result");
    }

    public java.util.List<com.aries.department.athena.contract.thrift.dto.DepartmentInfo> getSubDepartments(com.aries.department.athena.contract.thrift.dto.CompanyInfo companyInfo, long subDepartmentId) throws org.apache.thrift.TException
    {
      send_getSubDepartments(companyInfo, subDepartmentId);
      return recv_getSubDepartments();
    }

    public void send_getSubDepartments(com.aries.department.athena.contract.thrift.dto.CompanyInfo companyInfo, long subDepartmentId) throws org.apache.thrift.TException
    {
      getSubDepartments_args args = new getSubDepartments_args();
      args.setCompanyInfo(companyInfo);
      args.setSubDepartmentId(subDepartmentId);
      sendBase("getSubDepartments", args);
    }

    public java.util.List<com.aries.department.athena.contract.thrift.dto.DepartmentInfo> recv_getSubDepartments() throws org.apache.thrift.TException
    {
      getSubDepartments_result result = new getSubDepartments_result();
      receiveBase(result, "getSubDepartments");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSubDepartments failed: unknown result");
    }

    public com.aries.department.athena.contract.thrift.dto.AthenaResponse updateDepartmentNameById(com.aries.department.athena.contract.thrift.dto.CompanyInfo companyInfo, long departmentId, java.lang.String newDepartmentName) throws org.apache.thrift.TException
    {
      send_updateDepartmentNameById(companyInfo, departmentId, newDepartmentName);
      return recv_updateDepartmentNameById();
    }

    public void send_updateDepartmentNameById(com.aries.department.athena.contract.thrift.dto.CompanyInfo companyInfo, long departmentId, java.lang.String newDepartmentName) throws org.apache.thrift.TException
    {
      updateDepartmentNameById_args args = new updateDepartmentNameById_args();
      args.setCompanyInfo(companyInfo);
      args.setDepartmentId(departmentId);
      args.setNewDepartmentName(newDepartmentName);
      sendBase("updateDepartmentNameById", args);
    }

    public com.aries.department.athena.contract.thrift.dto.AthenaResponse recv_updateDepartmentNameById() throws org.apache.thrift.TException
    {
      updateDepartmentNameById_result result = new updateDepartmentNameById_result();
      receiveBase(result, "updateDepartmentNameById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateDepartmentNameById failed: unknown result");
    }

    public com.aries.department.athena.contract.thrift.dto.AthenaResponse updateDepartmentLeaderById(com.aries.department.athena.contract.thrift.dto.CompanyInfo companyInfo, long departmentId, long leaderId) throws org.apache.thrift.TException
    {
      send_updateDepartmentLeaderById(companyInfo, departmentId, leaderId);
      return recv_updateDepartmentLeaderById();
    }

    public void send_updateDepartmentLeaderById(com.aries.department.athena.contract.thrift.dto.CompanyInfo companyInfo, long departmentId, long leaderId) throws org.apache.thrift.TException
    {
      updateDepartmentLeaderById_args args = new updateDepartmentLeaderById_args();
      args.setCompanyInfo(companyInfo);
      args.setDepartmentId(departmentId);
      args.setLeaderId(leaderId);
      sendBase("updateDepartmentLeaderById", args);
    }

    public com.aries.department.athena.contract.thrift.dto.AthenaResponse recv_updateDepartmentLeaderById() throws org.apache.thrift.TException
    {
      updateDepartmentLeaderById_result result = new updateDepartmentLeaderById_result();
      receiveBase(result, "updateDepartmentLeaderById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateDepartmentLeaderById failed: unknown result");
    }

    public com.aries.department.athena.contract.thrift.dto.AthenaResponse updateSupDepartmentById(com.aries.department.athena.contract.thrift.dto.CompanyInfo companyInfo, long departmentId, long supDepartmentId) throws org.apache.thrift.TException
    {
      send_updateSupDepartmentById(companyInfo, departmentId, supDepartmentId);
      return recv_updateSupDepartmentById();
    }

    public void send_updateSupDepartmentById(com.aries.department.athena.contract.thrift.dto.CompanyInfo companyInfo, long departmentId, long supDepartmentId) throws org.apache.thrift.TException
    {
      updateSupDepartmentById_args args = new updateSupDepartmentById_args();
      args.setCompanyInfo(companyInfo);
      args.setDepartmentId(departmentId);
      args.setSupDepartmentId(supDepartmentId);
      sendBase("updateSupDepartmentById", args);
    }

    public com.aries.department.athena.contract.thrift.dto.AthenaResponse recv_updateSupDepartmentById() throws org.apache.thrift.TException
    {
      updateSupDepartmentById_result result = new updateSupDepartmentById_result();
      receiveBase(result, "updateSupDepartmentById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateSupDepartmentById failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void ping(org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ping_call method_call = new ping_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ping_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      public ping_call(org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ping", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ping_args args = new ping_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ping();
      }
    }

    public void addDepartment(com.aries.department.athena.contract.thrift.dto.CompanyInfo companyInfo, com.aries.department.athena.contract.thrift.dto.DepartmentInfo departmentInfo, org.apache.thrift.async.AsyncMethodCallback<com.aries.department.athena.contract.thrift.dto.AthenaResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addDepartment_call method_call = new addDepartment_call(companyInfo, departmentInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addDepartment_call extends org.apache.thrift.async.TAsyncMethodCall<com.aries.department.athena.contract.thrift.dto.AthenaResponse> {
      private com.aries.department.athena.contract.thrift.dto.CompanyInfo companyInfo;
      private com.aries.department.athena.contract.thrift.dto.DepartmentInfo departmentInfo;
      public addDepartment_call(com.aries.department.athena.contract.thrift.dto.CompanyInfo companyInfo, com.aries.department.athena.contract.thrift.dto.DepartmentInfo departmentInfo, org.apache.thrift.async.AsyncMethodCallback<com.aries.department.athena.contract.thrift.dto.AthenaResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.companyInfo = companyInfo;
        this.departmentInfo = departmentInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addDepartment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addDepartment_args args = new addDepartment_args();
        args.setCompanyInfo(companyInfo);
        args.setDepartmentInfo(departmentInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.aries.department.athena.contract.thrift.dto.AthenaResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addDepartment();
      }
    }

    public void getDepartmentById(com.aries.department.athena.contract.thrift.dto.CompanyInfo companyInfo, long departmentId, org.apache.thrift.async.AsyncMethodCallback<com.aries.department.athena.contract.thrift.dto.DepartmentInfo> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDepartmentById_call method_call = new getDepartmentById_call(companyInfo, departmentId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDepartmentById_call extends org.apache.thrift.async.TAsyncMethodCall<com.aries.department.athena.contract.thrift.dto.DepartmentInfo> {
      private com.aries.department.athena.contract.thrift.dto.CompanyInfo companyInfo;
      private long departmentId;
      public getDepartmentById_call(com.aries.department.athena.contract.thrift.dto.CompanyInfo companyInfo, long departmentId, org.apache.thrift.async.AsyncMethodCallback<com.aries.department.athena.contract.thrift.dto.DepartmentInfo> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.companyInfo = companyInfo;
        this.departmentId = departmentId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDepartmentById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDepartmentById_args args = new getDepartmentById_args();
        args.setCompanyInfo(companyInfo);
        args.setDepartmentId(departmentId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.aries.department.athena.contract.thrift.dto.DepartmentInfo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDepartmentById();
      }
    }

    public void getRootDepartments(com.aries.department.athena.contract.thrift.dto.CompanyInfo companyInfo, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.aries.department.athena.contract.thrift.dto.DepartmentInfo>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRootDepartments_call method_call = new getRootDepartments_call(companyInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRootDepartments_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<com.aries.department.athena.contract.thrift.dto.DepartmentInfo>> {
      private com.aries.department.athena.contract.thrift.dto.CompanyInfo companyInfo;
      public getRootDepartments_call(com.aries.department.athena.contract.thrift.dto.CompanyInfo companyInfo, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.aries.department.athena.contract.thrift.dto.DepartmentInfo>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.companyInfo = companyInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRootDepartments", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRootDepartments_args args = new getRootDepartments_args();
        args.setCompanyInfo(companyInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<com.aries.department.athena.contract.thrift.dto.DepartmentInfo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRootDepartments();
      }
    }

    public void getSubDepartments(com.aries.department.athena.contract.thrift.dto.CompanyInfo companyInfo, long subDepartmentId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.aries.department.athena.contract.thrift.dto.DepartmentInfo>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSubDepartments_call method_call = new getSubDepartments_call(companyInfo, subDepartmentId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSubDepartments_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<com.aries.department.athena.contract.thrift.dto.DepartmentInfo>> {
      private com.aries.department.athena.contract.thrift.dto.CompanyInfo companyInfo;
      private long subDepartmentId;
      public getSubDepartments_call(com.aries.department.athena.contract.thrift.dto.CompanyInfo companyInfo, long subDepartmentId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.aries.department.athena.contract.thrift.dto.DepartmentInfo>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.companyInfo = companyInfo;
        this.subDepartmentId = subDepartmentId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSubDepartments", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSubDepartments_args args = new getSubDepartments_args();
        args.setCompanyInfo(companyInfo);
        args.setSubDepartmentId(subDepartmentId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<com.aries.department.athena.contract.thrift.dto.DepartmentInfo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSubDepartments();
      }
    }

    public void updateDepartmentNameById(com.aries.department.athena.contract.thrift.dto.CompanyInfo companyInfo, long departmentId, java.lang.String newDepartmentName, org.apache.thrift.async.AsyncMethodCallback<com.aries.department.athena.contract.thrift.dto.AthenaResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateDepartmentNameById_call method_call = new updateDepartmentNameById_call(companyInfo, departmentId, newDepartmentName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateDepartmentNameById_call extends org.apache.thrift.async.TAsyncMethodCall<com.aries.department.athena.contract.thrift.dto.AthenaResponse> {
      private com.aries.department.athena.contract.thrift.dto.CompanyInfo companyInfo;
      private long departmentId;
      private java.lang.String newDepartmentName;
      public updateDepartmentNameById_call(com.aries.department.athena.contract.thrift.dto.CompanyInfo companyInfo, long departmentId, java.lang.String newDepartmentName, org.apache.thrift.async.AsyncMethodCallback<com.aries.department.athena.contract.thrift.dto.AthenaResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.companyInfo = companyInfo;
        this.departmentId = departmentId;
        this.newDepartmentName = newDepartmentName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateDepartmentNameById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateDepartmentNameById_args args = new updateDepartmentNameById_args();
        args.setCompanyInfo(companyInfo);
        args.setDepartmentId(departmentId);
        args.setNewDepartmentName(newDepartmentName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.aries.department.athena.contract.thrift.dto.AthenaResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateDepartmentNameById();
      }
    }

    public void updateDepartmentLeaderById(com.aries.department.athena.contract.thrift.dto.CompanyInfo companyInfo, long departmentId, long leaderId, org.apache.thrift.async.AsyncMethodCallback<com.aries.department.athena.contract.thrift.dto.AthenaResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateDepartmentLeaderById_call method_call = new updateDepartmentLeaderById_call(companyInfo, departmentId, leaderId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateDepartmentLeaderById_call extends org.apache.thrift.async.TAsyncMethodCall<com.aries.department.athena.contract.thrift.dto.AthenaResponse> {
      private com.aries.department.athena.contract.thrift.dto.CompanyInfo companyInfo;
      private long departmentId;
      private long leaderId;
      public updateDepartmentLeaderById_call(com.aries.department.athena.contract.thrift.dto.CompanyInfo companyInfo, long departmentId, long leaderId, org.apache.thrift.async.AsyncMethodCallback<com.aries.department.athena.contract.thrift.dto.AthenaResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.companyInfo = companyInfo;
        this.departmentId = departmentId;
        this.leaderId = leaderId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateDepartmentLeaderById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateDepartmentLeaderById_args args = new updateDepartmentLeaderById_args();
        args.setCompanyInfo(companyInfo);
        args.setDepartmentId(departmentId);
        args.setLeaderId(leaderId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.aries.department.athena.contract.thrift.dto.AthenaResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateDepartmentLeaderById();
      }
    }

    public void updateSupDepartmentById(com.aries.department.athena.contract.thrift.dto.CompanyInfo companyInfo, long departmentId, long supDepartmentId, org.apache.thrift.async.AsyncMethodCallback<com.aries.department.athena.contract.thrift.dto.AthenaResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateSupDepartmentById_call method_call = new updateSupDepartmentById_call(companyInfo, departmentId, supDepartmentId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateSupDepartmentById_call extends org.apache.thrift.async.TAsyncMethodCall<com.aries.department.athena.contract.thrift.dto.AthenaResponse> {
      private com.aries.department.athena.contract.thrift.dto.CompanyInfo companyInfo;
      private long departmentId;
      private long supDepartmentId;
      public updateSupDepartmentById_call(com.aries.department.athena.contract.thrift.dto.CompanyInfo companyInfo, long departmentId, long supDepartmentId, org.apache.thrift.async.AsyncMethodCallback<com.aries.department.athena.contract.thrift.dto.AthenaResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.companyInfo = companyInfo;
        this.departmentId = departmentId;
        this.supDepartmentId = supDepartmentId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateSupDepartmentById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateSupDepartmentById_args args = new updateSupDepartmentById_args();
        args.setCompanyInfo(companyInfo);
        args.setDepartmentId(departmentId);
        args.setSupDepartmentId(supDepartmentId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.aries.department.athena.contract.thrift.dto.AthenaResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateSupDepartmentById();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("ping", new ping());
      processMap.put("addDepartment", new addDepartment());
      processMap.put("getDepartmentById", new getDepartmentById());
      processMap.put("getRootDepartments", new getRootDepartments());
      processMap.put("getSubDepartments", new getSubDepartments());
      processMap.put("updateDepartmentNameById", new updateDepartmentNameById());
      processMap.put("updateDepartmentLeaderById", new updateDepartmentLeaderById());
      processMap.put("updateSupDepartmentById", new updateSupDepartmentById());
      return processMap;
    }

    public static class ping<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ping_args> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public ping_result getResult(I iface, ping_args args) throws org.apache.thrift.TException {
        ping_result result = new ping_result();
        result.success = iface.ping();
        return result;
      }
    }

    public static class addDepartment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addDepartment_args> {
      public addDepartment() {
        super("addDepartment");
      }

      public addDepartment_args getEmptyArgsInstance() {
        return new addDepartment_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public addDepartment_result getResult(I iface, addDepartment_args args) throws org.apache.thrift.TException {
        addDepartment_result result = new addDepartment_result();
        result.success = iface.addDepartment(args.companyInfo, args.departmentInfo);
        return result;
      }
    }

    public static class getDepartmentById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDepartmentById_args> {
      public getDepartmentById() {
        super("getDepartmentById");
      }

      public getDepartmentById_args getEmptyArgsInstance() {
        return new getDepartmentById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getDepartmentById_result getResult(I iface, getDepartmentById_args args) throws org.apache.thrift.TException {
        getDepartmentById_result result = new getDepartmentById_result();
        result.success = iface.getDepartmentById(args.companyInfo, args.departmentId);
        return result;
      }
    }

    public static class getRootDepartments<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRootDepartments_args> {
      public getRootDepartments() {
        super("getRootDepartments");
      }

      public getRootDepartments_args getEmptyArgsInstance() {
        return new getRootDepartments_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getRootDepartments_result getResult(I iface, getRootDepartments_args args) throws org.apache.thrift.TException {
        getRootDepartments_result result = new getRootDepartments_result();
        result.success = iface.getRootDepartments(args.companyInfo);
        return result;
      }
    }

    public static class getSubDepartments<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSubDepartments_args> {
      public getSubDepartments() {
        super("getSubDepartments");
      }

      public getSubDepartments_args getEmptyArgsInstance() {
        return new getSubDepartments_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getSubDepartments_result getResult(I iface, getSubDepartments_args args) throws org.apache.thrift.TException {
        getSubDepartments_result result = new getSubDepartments_result();
        result.success = iface.getSubDepartments(args.companyInfo, args.subDepartmentId);
        return result;
      }
    }

    public static class updateDepartmentNameById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateDepartmentNameById_args> {
      public updateDepartmentNameById() {
        super("updateDepartmentNameById");
      }

      public updateDepartmentNameById_args getEmptyArgsInstance() {
        return new updateDepartmentNameById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public updateDepartmentNameById_result getResult(I iface, updateDepartmentNameById_args args) throws org.apache.thrift.TException {
        updateDepartmentNameById_result result = new updateDepartmentNameById_result();
        result.success = iface.updateDepartmentNameById(args.companyInfo, args.departmentId, args.newDepartmentName);
        return result;
      }
    }

    public static class updateDepartmentLeaderById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateDepartmentLeaderById_args> {
      public updateDepartmentLeaderById() {
        super("updateDepartmentLeaderById");
      }

      public updateDepartmentLeaderById_args getEmptyArgsInstance() {
        return new updateDepartmentLeaderById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public updateDepartmentLeaderById_result getResult(I iface, updateDepartmentLeaderById_args args) throws org.apache.thrift.TException {
        updateDepartmentLeaderById_result result = new updateDepartmentLeaderById_result();
        result.success = iface.updateDepartmentLeaderById(args.companyInfo, args.departmentId, args.leaderId);
        return result;
      }
    }

    public static class updateSupDepartmentById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateSupDepartmentById_args> {
      public updateSupDepartmentById() {
        super("updateSupDepartmentById");
      }

      public updateSupDepartmentById_args getEmptyArgsInstance() {
        return new updateSupDepartmentById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public updateSupDepartmentById_result getResult(I iface, updateSupDepartmentById_args args) throws org.apache.thrift.TException {
        updateSupDepartmentById_result result = new updateSupDepartmentById_result();
        result.success = iface.updateSupDepartmentById(args.companyInfo, args.departmentId, args.supDepartmentId);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("ping", new ping());
      processMap.put("addDepartment", new addDepartment());
      processMap.put("getDepartmentById", new getDepartmentById());
      processMap.put("getRootDepartments", new getRootDepartments());
      processMap.put("getSubDepartments", new getSubDepartments());
      processMap.put("updateDepartmentNameById", new updateDepartmentNameById());
      processMap.put("updateDepartmentLeaderById", new updateDepartmentLeaderById());
      processMap.put("updateSupDepartmentById", new updateSupDepartmentById());
      return processMap;
    }

    public static class ping<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ping_args, java.lang.String> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            ping_result result = new ping_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            ping_result result = new ping_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ping_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.ping(resultHandler);
      }
    }

    public static class addDepartment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addDepartment_args, com.aries.department.athena.contract.thrift.dto.AthenaResponse> {
      public addDepartment() {
        super("addDepartment");
      }

      public addDepartment_args getEmptyArgsInstance() {
        return new addDepartment_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.aries.department.athena.contract.thrift.dto.AthenaResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.aries.department.athena.contract.thrift.dto.AthenaResponse>() { 
          public void onComplete(com.aries.department.athena.contract.thrift.dto.AthenaResponse o) {
            addDepartment_result result = new addDepartment_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            addDepartment_result result = new addDepartment_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addDepartment_args args, org.apache.thrift.async.AsyncMethodCallback<com.aries.department.athena.contract.thrift.dto.AthenaResponse> resultHandler) throws org.apache.thrift.TException {
        iface.addDepartment(args.companyInfo, args.departmentInfo,resultHandler);
      }
    }

    public static class getDepartmentById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getDepartmentById_args, com.aries.department.athena.contract.thrift.dto.DepartmentInfo> {
      public getDepartmentById() {
        super("getDepartmentById");
      }

      public getDepartmentById_args getEmptyArgsInstance() {
        return new getDepartmentById_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.aries.department.athena.contract.thrift.dto.DepartmentInfo> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.aries.department.athena.contract.thrift.dto.DepartmentInfo>() { 
          public void onComplete(com.aries.department.athena.contract.thrift.dto.DepartmentInfo o) {
            getDepartmentById_result result = new getDepartmentById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getDepartmentById_result result = new getDepartmentById_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getDepartmentById_args args, org.apache.thrift.async.AsyncMethodCallback<com.aries.department.athena.contract.thrift.dto.DepartmentInfo> resultHandler) throws org.apache.thrift.TException {
        iface.getDepartmentById(args.companyInfo, args.departmentId,resultHandler);
      }
    }

    public static class getRootDepartments<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRootDepartments_args, java.util.List<com.aries.department.athena.contract.thrift.dto.DepartmentInfo>> {
      public getRootDepartments() {
        super("getRootDepartments");
      }

      public getRootDepartments_args getEmptyArgsInstance() {
        return new getRootDepartments_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.aries.department.athena.contract.thrift.dto.DepartmentInfo>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.aries.department.athena.contract.thrift.dto.DepartmentInfo>>() { 
          public void onComplete(java.util.List<com.aries.department.athena.contract.thrift.dto.DepartmentInfo> o) {
            getRootDepartments_result result = new getRootDepartments_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getRootDepartments_result result = new getRootDepartments_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRootDepartments_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.aries.department.athena.contract.thrift.dto.DepartmentInfo>> resultHandler) throws org.apache.thrift.TException {
        iface.getRootDepartments(args.companyInfo,resultHandler);
      }
    }

    public static class getSubDepartments<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSubDepartments_args, java.util.List<com.aries.department.athena.contract.thrift.dto.DepartmentInfo>> {
      public getSubDepartments() {
        super("getSubDepartments");
      }

      public getSubDepartments_args getEmptyArgsInstance() {
        return new getSubDepartments_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.aries.department.athena.contract.thrift.dto.DepartmentInfo>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.aries.department.athena.contract.thrift.dto.DepartmentInfo>>() { 
          public void onComplete(java.util.List<com.aries.department.athena.contract.thrift.dto.DepartmentInfo> o) {
            getSubDepartments_result result = new getSubDepartments_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getSubDepartments_result result = new getSubDepartments_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSubDepartments_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.aries.department.athena.contract.thrift.dto.DepartmentInfo>> resultHandler) throws org.apache.thrift.TException {
        iface.getSubDepartments(args.companyInfo, args.subDepartmentId,resultHandler);
      }
    }

    public static class updateDepartmentNameById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateDepartmentNameById_args, com.aries.department.athena.contract.thrift.dto.AthenaResponse> {
      public updateDepartmentNameById() {
        super("updateDepartmentNameById");
      }

      public updateDepartmentNameById_args getEmptyArgsInstance() {
        return new updateDepartmentNameById_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.aries.department.athena.contract.thrift.dto.AthenaResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.aries.department.athena.contract.thrift.dto.AthenaResponse>() { 
          public void onComplete(com.aries.department.athena.contract.thrift.dto.AthenaResponse o) {
            updateDepartmentNameById_result result = new updateDepartmentNameById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            updateDepartmentNameById_result result = new updateDepartmentNameById_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateDepartmentNameById_args args, org.apache.thrift.async.AsyncMethodCallback<com.aries.department.athena.contract.thrift.dto.AthenaResponse> resultHandler) throws org.apache.thrift.TException {
        iface.updateDepartmentNameById(args.companyInfo, args.departmentId, args.newDepartmentName,resultHandler);
      }
    }

    public static class updateDepartmentLeaderById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateDepartmentLeaderById_args, com.aries.department.athena.contract.thrift.dto.AthenaResponse> {
      public updateDepartmentLeaderById() {
        super("updateDepartmentLeaderById");
      }

      public updateDepartmentLeaderById_args getEmptyArgsInstance() {
        return new updateDepartmentLeaderById_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.aries.department.athena.contract.thrift.dto.AthenaResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.aries.department.athena.contract.thrift.dto.AthenaResponse>() { 
          public void onComplete(com.aries.department.athena.contract.thrift.dto.AthenaResponse o) {
            updateDepartmentLeaderById_result result = new updateDepartmentLeaderById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            updateDepartmentLeaderById_result result = new updateDepartmentLeaderById_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateDepartmentLeaderById_args args, org.apache.thrift.async.AsyncMethodCallback<com.aries.department.athena.contract.thrift.dto.AthenaResponse> resultHandler) throws org.apache.thrift.TException {
        iface.updateDepartmentLeaderById(args.companyInfo, args.departmentId, args.leaderId,resultHandler);
      }
    }

    public static class updateSupDepartmentById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateSupDepartmentById_args, com.aries.department.athena.contract.thrift.dto.AthenaResponse> {
      public updateSupDepartmentById() {
        super("updateSupDepartmentById");
      }

      public updateSupDepartmentById_args getEmptyArgsInstance() {
        return new updateSupDepartmentById_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.aries.department.athena.contract.thrift.dto.AthenaResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.aries.department.athena.contract.thrift.dto.AthenaResponse>() { 
          public void onComplete(com.aries.department.athena.contract.thrift.dto.AthenaResponse o) {
            updateSupDepartmentById_result result = new updateSupDepartmentById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            updateSupDepartmentById_result result = new updateSupDepartmentById_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateSupDepartmentById_args args, org.apache.thrift.async.AsyncMethodCallback<com.aries.department.athena.contract.thrift.dto.AthenaResponse> resultHandler) throws org.apache.thrift.TException {
        iface.updateSupDepartmentById(args.companyInfo, args.departmentId, args.supDepartmentId,resultHandler);
      }
    }

  }

  public static class ping_args implements org.apache.thrift.TBase<ping_args, ping_args._Fields>, java.io.Serializable, Cloneable, Comparable<ping_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ping_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ping_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_args.class, metaDataMap);
    }

    public ping_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_args(ping_args other) {
    }

    public ping_args deepCopy() {
      return new ping_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_args)
        return this.equals((ping_args)that);
      return false;
    }

    public boolean equals(ping_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(ping_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ping_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ping_argsStandardScheme getScheme() {
        return new ping_argsStandardScheme();
      }
    }

    private static class ping_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ping_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ping_argsTupleScheme getScheme() {
        return new ping_argsTupleScheme();
      }
    }

    private static class ping_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ping_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ping_result implements org.apache.thrift.TBase<ping_result, ping_result._Fields>, java.io.Serializable, Cloneable, Comparable<ping_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ping_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ping_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_result.class, metaDataMap);
    }

    public ping_result() {
    }

    public ping_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_result(ping_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public ping_result deepCopy() {
      return new ping_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSuccess() {
      return this.success;
    }

    public ping_result setSuccess(@org.apache.thrift.annotation.Nullable java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_result)
        return this.equals((ping_result)that);
      return false;
    }

    public boolean equals(ping_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ping_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ping_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ping_resultStandardScheme getScheme() {
        return new ping_resultStandardScheme();
      }
    }

    private static class ping_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ping_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ping_resultTupleScheme getScheme() {
        return new ping_resultTupleScheme();
      }
    }

    private static class ping_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ping_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class addDepartment_args implements org.apache.thrift.TBase<addDepartment_args, addDepartment_args._Fields>, java.io.Serializable, Cloneable, Comparable<addDepartment_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addDepartment_args");

    private static final org.apache.thrift.protocol.TField COMPANY_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("companyInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DEPARTMENT_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("departmentInfo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addDepartment_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addDepartment_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.aries.department.athena.contract.thrift.dto.CompanyInfo companyInfo; // required
    public @org.apache.thrift.annotation.Nullable com.aries.department.athena.contract.thrift.dto.DepartmentInfo departmentInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMPANY_INFO((short)1, "companyInfo"),
      DEPARTMENT_INFO((short)2, "departmentInfo");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMPANY_INFO
            return COMPANY_INFO;
          case 2: // DEPARTMENT_INFO
            return DEPARTMENT_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMPANY_INFO, new org.apache.thrift.meta_data.FieldMetaData("companyInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.aries.department.athena.contract.thrift.dto.CompanyInfo.class)));
      tmpMap.put(_Fields.DEPARTMENT_INFO, new org.apache.thrift.meta_data.FieldMetaData("departmentInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.aries.department.athena.contract.thrift.dto.DepartmentInfo.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addDepartment_args.class, metaDataMap);
    }

    public addDepartment_args() {
    }

    public addDepartment_args(
      com.aries.department.athena.contract.thrift.dto.CompanyInfo companyInfo,
      com.aries.department.athena.contract.thrift.dto.DepartmentInfo departmentInfo)
    {
      this();
      this.companyInfo = companyInfo;
      this.departmentInfo = departmentInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addDepartment_args(addDepartment_args other) {
      if (other.isSetCompanyInfo()) {
        this.companyInfo = new com.aries.department.athena.contract.thrift.dto.CompanyInfo(other.companyInfo);
      }
      if (other.isSetDepartmentInfo()) {
        this.departmentInfo = new com.aries.department.athena.contract.thrift.dto.DepartmentInfo(other.departmentInfo);
      }
    }

    public addDepartment_args deepCopy() {
      return new addDepartment_args(this);
    }

    @Override
    public void clear() {
      this.companyInfo = null;
      this.departmentInfo = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.aries.department.athena.contract.thrift.dto.CompanyInfo getCompanyInfo() {
      return this.companyInfo;
    }

    public addDepartment_args setCompanyInfo(@org.apache.thrift.annotation.Nullable com.aries.department.athena.contract.thrift.dto.CompanyInfo companyInfo) {
      this.companyInfo = companyInfo;
      return this;
    }

    public void unsetCompanyInfo() {
      this.companyInfo = null;
    }

    /** Returns true if field companyInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetCompanyInfo() {
      return this.companyInfo != null;
    }

    public void setCompanyInfoIsSet(boolean value) {
      if (!value) {
        this.companyInfo = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public com.aries.department.athena.contract.thrift.dto.DepartmentInfo getDepartmentInfo() {
      return this.departmentInfo;
    }

    public addDepartment_args setDepartmentInfo(@org.apache.thrift.annotation.Nullable com.aries.department.athena.contract.thrift.dto.DepartmentInfo departmentInfo) {
      this.departmentInfo = departmentInfo;
      return this;
    }

    public void unsetDepartmentInfo() {
      this.departmentInfo = null;
    }

    /** Returns true if field departmentInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetDepartmentInfo() {
      return this.departmentInfo != null;
    }

    public void setDepartmentInfoIsSet(boolean value) {
      if (!value) {
        this.departmentInfo = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case COMPANY_INFO:
        if (value == null) {
          unsetCompanyInfo();
        } else {
          setCompanyInfo((com.aries.department.athena.contract.thrift.dto.CompanyInfo)value);
        }
        break;

      case DEPARTMENT_INFO:
        if (value == null) {
          unsetDepartmentInfo();
        } else {
          setDepartmentInfo((com.aries.department.athena.contract.thrift.dto.DepartmentInfo)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case COMPANY_INFO:
        return getCompanyInfo();

      case DEPARTMENT_INFO:
        return getDepartmentInfo();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case COMPANY_INFO:
        return isSetCompanyInfo();
      case DEPARTMENT_INFO:
        return isSetDepartmentInfo();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof addDepartment_args)
        return this.equals((addDepartment_args)that);
      return false;
    }

    public boolean equals(addDepartment_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_companyInfo = true && this.isSetCompanyInfo();
      boolean that_present_companyInfo = true && that.isSetCompanyInfo();
      if (this_present_companyInfo || that_present_companyInfo) {
        if (!(this_present_companyInfo && that_present_companyInfo))
          return false;
        if (!this.companyInfo.equals(that.companyInfo))
          return false;
      }

      boolean this_present_departmentInfo = true && this.isSetDepartmentInfo();
      boolean that_present_departmentInfo = true && that.isSetDepartmentInfo();
      if (this_present_departmentInfo || that_present_departmentInfo) {
        if (!(this_present_departmentInfo && that_present_departmentInfo))
          return false;
        if (!this.departmentInfo.equals(that.departmentInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCompanyInfo()) ? 131071 : 524287);
      if (isSetCompanyInfo())
        hashCode = hashCode * 8191 + companyInfo.hashCode();

      hashCode = hashCode * 8191 + ((isSetDepartmentInfo()) ? 131071 : 524287);
      if (isSetDepartmentInfo())
        hashCode = hashCode * 8191 + departmentInfo.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(addDepartment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetCompanyInfo()).compareTo(other.isSetCompanyInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCompanyInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyInfo, other.companyInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDepartmentInfo()).compareTo(other.isSetDepartmentInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDepartmentInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.departmentInfo, other.departmentInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("addDepartment_args(");
      boolean first = true;

      sb.append("companyInfo:");
      if (this.companyInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.companyInfo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("departmentInfo:");
      if (this.departmentInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.departmentInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (companyInfo != null) {
        companyInfo.validate();
      }
      if (departmentInfo != null) {
        departmentInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addDepartment_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addDepartment_argsStandardScheme getScheme() {
        return new addDepartment_argsStandardScheme();
      }
    }

    private static class addDepartment_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<addDepartment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addDepartment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMPANY_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.companyInfo = new com.aries.department.athena.contract.thrift.dto.CompanyInfo();
                struct.companyInfo.read(iprot);
                struct.setCompanyInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEPARTMENT_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.departmentInfo = new com.aries.department.athena.contract.thrift.dto.DepartmentInfo();
                struct.departmentInfo.read(iprot);
                struct.setDepartmentInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addDepartment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.companyInfo != null) {
          oprot.writeFieldBegin(COMPANY_INFO_FIELD_DESC);
          struct.companyInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.departmentInfo != null) {
          oprot.writeFieldBegin(DEPARTMENT_INFO_FIELD_DESC);
          struct.departmentInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addDepartment_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addDepartment_argsTupleScheme getScheme() {
        return new addDepartment_argsTupleScheme();
      }
    }

    private static class addDepartment_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<addDepartment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addDepartment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCompanyInfo()) {
          optionals.set(0);
        }
        if (struct.isSetDepartmentInfo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCompanyInfo()) {
          struct.companyInfo.write(oprot);
        }
        if (struct.isSetDepartmentInfo()) {
          struct.departmentInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addDepartment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.companyInfo = new com.aries.department.athena.contract.thrift.dto.CompanyInfo();
          struct.companyInfo.read(iprot);
          struct.setCompanyInfoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.departmentInfo = new com.aries.department.athena.contract.thrift.dto.DepartmentInfo();
          struct.departmentInfo.read(iprot);
          struct.setDepartmentInfoIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class addDepartment_result implements org.apache.thrift.TBase<addDepartment_result, addDepartment_result._Fields>, java.io.Serializable, Cloneable, Comparable<addDepartment_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addDepartment_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addDepartment_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addDepartment_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.aries.department.athena.contract.thrift.dto.AthenaResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.aries.department.athena.contract.thrift.dto.AthenaResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addDepartment_result.class, metaDataMap);
    }

    public addDepartment_result() {
    }

    public addDepartment_result(
      com.aries.department.athena.contract.thrift.dto.AthenaResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addDepartment_result(addDepartment_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.aries.department.athena.contract.thrift.dto.AthenaResponse(other.success);
      }
    }

    public addDepartment_result deepCopy() {
      return new addDepartment_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.aries.department.athena.contract.thrift.dto.AthenaResponse getSuccess() {
      return this.success;
    }

    public addDepartment_result setSuccess(@org.apache.thrift.annotation.Nullable com.aries.department.athena.contract.thrift.dto.AthenaResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.aries.department.athena.contract.thrift.dto.AthenaResponse)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof addDepartment_result)
        return this.equals((addDepartment_result)that);
      return false;
    }

    public boolean equals(addDepartment_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(addDepartment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("addDepartment_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addDepartment_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addDepartment_resultStandardScheme getScheme() {
        return new addDepartment_resultStandardScheme();
      }
    }

    private static class addDepartment_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<addDepartment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addDepartment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.aries.department.athena.contract.thrift.dto.AthenaResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addDepartment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addDepartment_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addDepartment_resultTupleScheme getScheme() {
        return new addDepartment_resultTupleScheme();
      }
    }

    private static class addDepartment_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<addDepartment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addDepartment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addDepartment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.aries.department.athena.contract.thrift.dto.AthenaResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getDepartmentById_args implements org.apache.thrift.TBase<getDepartmentById_args, getDepartmentById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getDepartmentById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDepartmentById_args");

    private static final org.apache.thrift.protocol.TField COMPANY_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("companyInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DEPARTMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("departmentId", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getDepartmentById_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getDepartmentById_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.aries.department.athena.contract.thrift.dto.CompanyInfo companyInfo; // required
    public long departmentId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMPANY_INFO((short)1, "companyInfo"),
      DEPARTMENT_ID((short)2, "departmentId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMPANY_INFO
            return COMPANY_INFO;
          case 2: // DEPARTMENT_ID
            return DEPARTMENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DEPARTMENTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMPANY_INFO, new org.apache.thrift.meta_data.FieldMetaData("companyInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.aries.department.athena.contract.thrift.dto.CompanyInfo.class)));
      tmpMap.put(_Fields.DEPARTMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("departmentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDepartmentById_args.class, metaDataMap);
    }

    public getDepartmentById_args() {
    }

    public getDepartmentById_args(
      com.aries.department.athena.contract.thrift.dto.CompanyInfo companyInfo,
      long departmentId)
    {
      this();
      this.companyInfo = companyInfo;
      this.departmentId = departmentId;
      setDepartmentIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDepartmentById_args(getDepartmentById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetCompanyInfo()) {
        this.companyInfo = new com.aries.department.athena.contract.thrift.dto.CompanyInfo(other.companyInfo);
      }
      this.departmentId = other.departmentId;
    }

    public getDepartmentById_args deepCopy() {
      return new getDepartmentById_args(this);
    }

    @Override
    public void clear() {
      this.companyInfo = null;
      setDepartmentIdIsSet(false);
      this.departmentId = 0;
    }

    @org.apache.thrift.annotation.Nullable
    public com.aries.department.athena.contract.thrift.dto.CompanyInfo getCompanyInfo() {
      return this.companyInfo;
    }

    public getDepartmentById_args setCompanyInfo(@org.apache.thrift.annotation.Nullable com.aries.department.athena.contract.thrift.dto.CompanyInfo companyInfo) {
      this.companyInfo = companyInfo;
      return this;
    }

    public void unsetCompanyInfo() {
      this.companyInfo = null;
    }

    /** Returns true if field companyInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetCompanyInfo() {
      return this.companyInfo != null;
    }

    public void setCompanyInfoIsSet(boolean value) {
      if (!value) {
        this.companyInfo = null;
      }
    }

    public long getDepartmentId() {
      return this.departmentId;
    }

    public getDepartmentById_args setDepartmentId(long departmentId) {
      this.departmentId = departmentId;
      setDepartmentIdIsSet(true);
      return this;
    }

    public void unsetDepartmentId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DEPARTMENTID_ISSET_ID);
    }

    /** Returns true if field departmentId is set (has been assigned a value) and false otherwise */
    public boolean isSetDepartmentId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DEPARTMENTID_ISSET_ID);
    }

    public void setDepartmentIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DEPARTMENTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case COMPANY_INFO:
        if (value == null) {
          unsetCompanyInfo();
        } else {
          setCompanyInfo((com.aries.department.athena.contract.thrift.dto.CompanyInfo)value);
        }
        break;

      case DEPARTMENT_ID:
        if (value == null) {
          unsetDepartmentId();
        } else {
          setDepartmentId((java.lang.Long)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case COMPANY_INFO:
        return getCompanyInfo();

      case DEPARTMENT_ID:
        return getDepartmentId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case COMPANY_INFO:
        return isSetCompanyInfo();
      case DEPARTMENT_ID:
        return isSetDepartmentId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getDepartmentById_args)
        return this.equals((getDepartmentById_args)that);
      return false;
    }

    public boolean equals(getDepartmentById_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_companyInfo = true && this.isSetCompanyInfo();
      boolean that_present_companyInfo = true && that.isSetCompanyInfo();
      if (this_present_companyInfo || that_present_companyInfo) {
        if (!(this_present_companyInfo && that_present_companyInfo))
          return false;
        if (!this.companyInfo.equals(that.companyInfo))
          return false;
      }

      boolean this_present_departmentId = true;
      boolean that_present_departmentId = true;
      if (this_present_departmentId || that_present_departmentId) {
        if (!(this_present_departmentId && that_present_departmentId))
          return false;
        if (this.departmentId != that.departmentId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCompanyInfo()) ? 131071 : 524287);
      if (isSetCompanyInfo())
        hashCode = hashCode * 8191 + companyInfo.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(departmentId);

      return hashCode;
    }

    @Override
    public int compareTo(getDepartmentById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetCompanyInfo()).compareTo(other.isSetCompanyInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCompanyInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyInfo, other.companyInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDepartmentId()).compareTo(other.isSetDepartmentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDepartmentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.departmentId, other.departmentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getDepartmentById_args(");
      boolean first = true;

      sb.append("companyInfo:");
      if (this.companyInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.companyInfo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("departmentId:");
      sb.append(this.departmentId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (companyInfo != null) {
        companyInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDepartmentById_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDepartmentById_argsStandardScheme getScheme() {
        return new getDepartmentById_argsStandardScheme();
      }
    }

    private static class getDepartmentById_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getDepartmentById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDepartmentById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMPANY_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.companyInfo = new com.aries.department.athena.contract.thrift.dto.CompanyInfo();
                struct.companyInfo.read(iprot);
                struct.setCompanyInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEPARTMENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.departmentId = iprot.readI64();
                struct.setDepartmentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDepartmentById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.companyInfo != null) {
          oprot.writeFieldBegin(COMPANY_INFO_FIELD_DESC);
          struct.companyInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(DEPARTMENT_ID_FIELD_DESC);
        oprot.writeI64(struct.departmentId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDepartmentById_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDepartmentById_argsTupleScheme getScheme() {
        return new getDepartmentById_argsTupleScheme();
      }
    }

    private static class getDepartmentById_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getDepartmentById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDepartmentById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCompanyInfo()) {
          optionals.set(0);
        }
        if (struct.isSetDepartmentId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCompanyInfo()) {
          struct.companyInfo.write(oprot);
        }
        if (struct.isSetDepartmentId()) {
          oprot.writeI64(struct.departmentId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDepartmentById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.companyInfo = new com.aries.department.athena.contract.thrift.dto.CompanyInfo();
          struct.companyInfo.read(iprot);
          struct.setCompanyInfoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.departmentId = iprot.readI64();
          struct.setDepartmentIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getDepartmentById_result implements org.apache.thrift.TBase<getDepartmentById_result, getDepartmentById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getDepartmentById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDepartmentById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getDepartmentById_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getDepartmentById_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.aries.department.athena.contract.thrift.dto.DepartmentInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.aries.department.athena.contract.thrift.dto.DepartmentInfo.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDepartmentById_result.class, metaDataMap);
    }

    public getDepartmentById_result() {
    }

    public getDepartmentById_result(
      com.aries.department.athena.contract.thrift.dto.DepartmentInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDepartmentById_result(getDepartmentById_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.aries.department.athena.contract.thrift.dto.DepartmentInfo(other.success);
      }
    }

    public getDepartmentById_result deepCopy() {
      return new getDepartmentById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.aries.department.athena.contract.thrift.dto.DepartmentInfo getSuccess() {
      return this.success;
    }

    public getDepartmentById_result setSuccess(@org.apache.thrift.annotation.Nullable com.aries.department.athena.contract.thrift.dto.DepartmentInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.aries.department.athena.contract.thrift.dto.DepartmentInfo)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getDepartmentById_result)
        return this.equals((getDepartmentById_result)that);
      return false;
    }

    public boolean equals(getDepartmentById_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getDepartmentById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getDepartmentById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDepartmentById_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDepartmentById_resultStandardScheme getScheme() {
        return new getDepartmentById_resultStandardScheme();
      }
    }

    private static class getDepartmentById_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getDepartmentById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDepartmentById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.aries.department.athena.contract.thrift.dto.DepartmentInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDepartmentById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDepartmentById_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDepartmentById_resultTupleScheme getScheme() {
        return new getDepartmentById_resultTupleScheme();
      }
    }

    private static class getDepartmentById_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getDepartmentById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDepartmentById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDepartmentById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.aries.department.athena.contract.thrift.dto.DepartmentInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getRootDepartments_args implements org.apache.thrift.TBase<getRootDepartments_args, getRootDepartments_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRootDepartments_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRootDepartments_args");

    private static final org.apache.thrift.protocol.TField COMPANY_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("companyInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getRootDepartments_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getRootDepartments_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.aries.department.athena.contract.thrift.dto.CompanyInfo companyInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMPANY_INFO((short)1, "companyInfo");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMPANY_INFO
            return COMPANY_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMPANY_INFO, new org.apache.thrift.meta_data.FieldMetaData("companyInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.aries.department.athena.contract.thrift.dto.CompanyInfo.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRootDepartments_args.class, metaDataMap);
    }

    public getRootDepartments_args() {
    }

    public getRootDepartments_args(
      com.aries.department.athena.contract.thrift.dto.CompanyInfo companyInfo)
    {
      this();
      this.companyInfo = companyInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRootDepartments_args(getRootDepartments_args other) {
      if (other.isSetCompanyInfo()) {
        this.companyInfo = new com.aries.department.athena.contract.thrift.dto.CompanyInfo(other.companyInfo);
      }
    }

    public getRootDepartments_args deepCopy() {
      return new getRootDepartments_args(this);
    }

    @Override
    public void clear() {
      this.companyInfo = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.aries.department.athena.contract.thrift.dto.CompanyInfo getCompanyInfo() {
      return this.companyInfo;
    }

    public getRootDepartments_args setCompanyInfo(@org.apache.thrift.annotation.Nullable com.aries.department.athena.contract.thrift.dto.CompanyInfo companyInfo) {
      this.companyInfo = companyInfo;
      return this;
    }

    public void unsetCompanyInfo() {
      this.companyInfo = null;
    }

    /** Returns true if field companyInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetCompanyInfo() {
      return this.companyInfo != null;
    }

    public void setCompanyInfoIsSet(boolean value) {
      if (!value) {
        this.companyInfo = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case COMPANY_INFO:
        if (value == null) {
          unsetCompanyInfo();
        } else {
          setCompanyInfo((com.aries.department.athena.contract.thrift.dto.CompanyInfo)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case COMPANY_INFO:
        return getCompanyInfo();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case COMPANY_INFO:
        return isSetCompanyInfo();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getRootDepartments_args)
        return this.equals((getRootDepartments_args)that);
      return false;
    }

    public boolean equals(getRootDepartments_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_companyInfo = true && this.isSetCompanyInfo();
      boolean that_present_companyInfo = true && that.isSetCompanyInfo();
      if (this_present_companyInfo || that_present_companyInfo) {
        if (!(this_present_companyInfo && that_present_companyInfo))
          return false;
        if (!this.companyInfo.equals(that.companyInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCompanyInfo()) ? 131071 : 524287);
      if (isSetCompanyInfo())
        hashCode = hashCode * 8191 + companyInfo.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getRootDepartments_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetCompanyInfo()).compareTo(other.isSetCompanyInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCompanyInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyInfo, other.companyInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getRootDepartments_args(");
      boolean first = true;

      sb.append("companyInfo:");
      if (this.companyInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.companyInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (companyInfo != null) {
        companyInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRootDepartments_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getRootDepartments_argsStandardScheme getScheme() {
        return new getRootDepartments_argsStandardScheme();
      }
    }

    private static class getRootDepartments_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getRootDepartments_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRootDepartments_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMPANY_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.companyInfo = new com.aries.department.athena.contract.thrift.dto.CompanyInfo();
                struct.companyInfo.read(iprot);
                struct.setCompanyInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRootDepartments_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.companyInfo != null) {
          oprot.writeFieldBegin(COMPANY_INFO_FIELD_DESC);
          struct.companyInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRootDepartments_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getRootDepartments_argsTupleScheme getScheme() {
        return new getRootDepartments_argsTupleScheme();
      }
    }

    private static class getRootDepartments_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getRootDepartments_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRootDepartments_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCompanyInfo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCompanyInfo()) {
          struct.companyInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRootDepartments_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.companyInfo = new com.aries.department.athena.contract.thrift.dto.CompanyInfo();
          struct.companyInfo.read(iprot);
          struct.setCompanyInfoIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getRootDepartments_result implements org.apache.thrift.TBase<getRootDepartments_result, getRootDepartments_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRootDepartments_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRootDepartments_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getRootDepartments_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getRootDepartments_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<com.aries.department.athena.contract.thrift.dto.DepartmentInfo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.aries.department.athena.contract.thrift.dto.DepartmentInfo.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRootDepartments_result.class, metaDataMap);
    }

    public getRootDepartments_result() {
    }

    public getRootDepartments_result(
      java.util.List<com.aries.department.athena.contract.thrift.dto.DepartmentInfo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRootDepartments_result(getRootDepartments_result other) {
      if (other.isSetSuccess()) {
        java.util.List<com.aries.department.athena.contract.thrift.dto.DepartmentInfo> __this__success = new java.util.ArrayList<com.aries.department.athena.contract.thrift.dto.DepartmentInfo>(other.success.size());
        for (com.aries.department.athena.contract.thrift.dto.DepartmentInfo other_element : other.success) {
          __this__success.add(new com.aries.department.athena.contract.thrift.dto.DepartmentInfo(other_element));
        }
        this.success = __this__success;
      }
    }

    public getRootDepartments_result deepCopy() {
      return new getRootDepartments_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<com.aries.department.athena.contract.thrift.dto.DepartmentInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.aries.department.athena.contract.thrift.dto.DepartmentInfo elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<com.aries.department.athena.contract.thrift.dto.DepartmentInfo>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<com.aries.department.athena.contract.thrift.dto.DepartmentInfo> getSuccess() {
      return this.success;
    }

    public getRootDepartments_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<com.aries.department.athena.contract.thrift.dto.DepartmentInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<com.aries.department.athena.contract.thrift.dto.DepartmentInfo>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getRootDepartments_result)
        return this.equals((getRootDepartments_result)that);
      return false;
    }

    public boolean equals(getRootDepartments_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getRootDepartments_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getRootDepartments_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRootDepartments_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getRootDepartments_resultStandardScheme getScheme() {
        return new getRootDepartments_resultStandardScheme();
      }
    }

    private static class getRootDepartments_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getRootDepartments_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRootDepartments_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<com.aries.department.athena.contract.thrift.dto.DepartmentInfo>(_list0.size);
                  @org.apache.thrift.annotation.Nullable com.aries.department.athena.contract.thrift.dto.DepartmentInfo _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new com.aries.department.athena.contract.thrift.dto.DepartmentInfo();
                    _elem1.read(iprot);
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRootDepartments_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.aries.department.athena.contract.thrift.dto.DepartmentInfo _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRootDepartments_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getRootDepartments_resultTupleScheme getScheme() {
        return new getRootDepartments_resultTupleScheme();
      }
    }

    private static class getRootDepartments_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getRootDepartments_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRootDepartments_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.aries.department.athena.contract.thrift.dto.DepartmentInfo _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRootDepartments_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<com.aries.department.athena.contract.thrift.dto.DepartmentInfo>(_list5.size);
            @org.apache.thrift.annotation.Nullable com.aries.department.athena.contract.thrift.dto.DepartmentInfo _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new com.aries.department.athena.contract.thrift.dto.DepartmentInfo();
              _elem6.read(iprot);
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getSubDepartments_args implements org.apache.thrift.TBase<getSubDepartments_args, getSubDepartments_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSubDepartments_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSubDepartments_args");

    private static final org.apache.thrift.protocol.TField COMPANY_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("companyInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SUB_DEPARTMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("subDepartmentId", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getSubDepartments_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getSubDepartments_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.aries.department.athena.contract.thrift.dto.CompanyInfo companyInfo; // required
    public long subDepartmentId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMPANY_INFO((short)1, "companyInfo"),
      SUB_DEPARTMENT_ID((short)2, "subDepartmentId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMPANY_INFO
            return COMPANY_INFO;
          case 2: // SUB_DEPARTMENT_ID
            return SUB_DEPARTMENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUBDEPARTMENTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMPANY_INFO, new org.apache.thrift.meta_data.FieldMetaData("companyInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.aries.department.athena.contract.thrift.dto.CompanyInfo.class)));
      tmpMap.put(_Fields.SUB_DEPARTMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("subDepartmentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSubDepartments_args.class, metaDataMap);
    }

    public getSubDepartments_args() {
    }

    public getSubDepartments_args(
      com.aries.department.athena.contract.thrift.dto.CompanyInfo companyInfo,
      long subDepartmentId)
    {
      this();
      this.companyInfo = companyInfo;
      this.subDepartmentId = subDepartmentId;
      setSubDepartmentIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSubDepartments_args(getSubDepartments_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetCompanyInfo()) {
        this.companyInfo = new com.aries.department.athena.contract.thrift.dto.CompanyInfo(other.companyInfo);
      }
      this.subDepartmentId = other.subDepartmentId;
    }

    public getSubDepartments_args deepCopy() {
      return new getSubDepartments_args(this);
    }

    @Override
    public void clear() {
      this.companyInfo = null;
      setSubDepartmentIdIsSet(false);
      this.subDepartmentId = 0;
    }

    @org.apache.thrift.annotation.Nullable
    public com.aries.department.athena.contract.thrift.dto.CompanyInfo getCompanyInfo() {
      return this.companyInfo;
    }

    public getSubDepartments_args setCompanyInfo(@org.apache.thrift.annotation.Nullable com.aries.department.athena.contract.thrift.dto.CompanyInfo companyInfo) {
      this.companyInfo = companyInfo;
      return this;
    }

    public void unsetCompanyInfo() {
      this.companyInfo = null;
    }

    /** Returns true if field companyInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetCompanyInfo() {
      return this.companyInfo != null;
    }

    public void setCompanyInfoIsSet(boolean value) {
      if (!value) {
        this.companyInfo = null;
      }
    }

    public long getSubDepartmentId() {
      return this.subDepartmentId;
    }

    public getSubDepartments_args setSubDepartmentId(long subDepartmentId) {
      this.subDepartmentId = subDepartmentId;
      setSubDepartmentIdIsSet(true);
      return this;
    }

    public void unsetSubDepartmentId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUBDEPARTMENTID_ISSET_ID);
    }

    /** Returns true if field subDepartmentId is set (has been assigned a value) and false otherwise */
    public boolean isSetSubDepartmentId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUBDEPARTMENTID_ISSET_ID);
    }

    public void setSubDepartmentIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUBDEPARTMENTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case COMPANY_INFO:
        if (value == null) {
          unsetCompanyInfo();
        } else {
          setCompanyInfo((com.aries.department.athena.contract.thrift.dto.CompanyInfo)value);
        }
        break;

      case SUB_DEPARTMENT_ID:
        if (value == null) {
          unsetSubDepartmentId();
        } else {
          setSubDepartmentId((java.lang.Long)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case COMPANY_INFO:
        return getCompanyInfo();

      case SUB_DEPARTMENT_ID:
        return getSubDepartmentId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case COMPANY_INFO:
        return isSetCompanyInfo();
      case SUB_DEPARTMENT_ID:
        return isSetSubDepartmentId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getSubDepartments_args)
        return this.equals((getSubDepartments_args)that);
      return false;
    }

    public boolean equals(getSubDepartments_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_companyInfo = true && this.isSetCompanyInfo();
      boolean that_present_companyInfo = true && that.isSetCompanyInfo();
      if (this_present_companyInfo || that_present_companyInfo) {
        if (!(this_present_companyInfo && that_present_companyInfo))
          return false;
        if (!this.companyInfo.equals(that.companyInfo))
          return false;
      }

      boolean this_present_subDepartmentId = true;
      boolean that_present_subDepartmentId = true;
      if (this_present_subDepartmentId || that_present_subDepartmentId) {
        if (!(this_present_subDepartmentId && that_present_subDepartmentId))
          return false;
        if (this.subDepartmentId != that.subDepartmentId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCompanyInfo()) ? 131071 : 524287);
      if (isSetCompanyInfo())
        hashCode = hashCode * 8191 + companyInfo.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(subDepartmentId);

      return hashCode;
    }

    @Override
    public int compareTo(getSubDepartments_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetCompanyInfo()).compareTo(other.isSetCompanyInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCompanyInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyInfo, other.companyInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSubDepartmentId()).compareTo(other.isSetSubDepartmentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSubDepartmentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subDepartmentId, other.subDepartmentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getSubDepartments_args(");
      boolean first = true;

      sb.append("companyInfo:");
      if (this.companyInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.companyInfo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("subDepartmentId:");
      sb.append(this.subDepartmentId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (companyInfo != null) {
        companyInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSubDepartments_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSubDepartments_argsStandardScheme getScheme() {
        return new getSubDepartments_argsStandardScheme();
      }
    }

    private static class getSubDepartments_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getSubDepartments_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSubDepartments_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMPANY_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.companyInfo = new com.aries.department.athena.contract.thrift.dto.CompanyInfo();
                struct.companyInfo.read(iprot);
                struct.setCompanyInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SUB_DEPARTMENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.subDepartmentId = iprot.readI64();
                struct.setSubDepartmentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSubDepartments_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.companyInfo != null) {
          oprot.writeFieldBegin(COMPANY_INFO_FIELD_DESC);
          struct.companyInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SUB_DEPARTMENT_ID_FIELD_DESC);
        oprot.writeI64(struct.subDepartmentId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSubDepartments_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSubDepartments_argsTupleScheme getScheme() {
        return new getSubDepartments_argsTupleScheme();
      }
    }

    private static class getSubDepartments_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getSubDepartments_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSubDepartments_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCompanyInfo()) {
          optionals.set(0);
        }
        if (struct.isSetSubDepartmentId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCompanyInfo()) {
          struct.companyInfo.write(oprot);
        }
        if (struct.isSetSubDepartmentId()) {
          oprot.writeI64(struct.subDepartmentId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSubDepartments_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.companyInfo = new com.aries.department.athena.contract.thrift.dto.CompanyInfo();
          struct.companyInfo.read(iprot);
          struct.setCompanyInfoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.subDepartmentId = iprot.readI64();
          struct.setSubDepartmentIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getSubDepartments_result implements org.apache.thrift.TBase<getSubDepartments_result, getSubDepartments_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSubDepartments_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSubDepartments_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getSubDepartments_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getSubDepartments_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<com.aries.department.athena.contract.thrift.dto.DepartmentInfo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.aries.department.athena.contract.thrift.dto.DepartmentInfo.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSubDepartments_result.class, metaDataMap);
    }

    public getSubDepartments_result() {
    }

    public getSubDepartments_result(
      java.util.List<com.aries.department.athena.contract.thrift.dto.DepartmentInfo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSubDepartments_result(getSubDepartments_result other) {
      if (other.isSetSuccess()) {
        java.util.List<com.aries.department.athena.contract.thrift.dto.DepartmentInfo> __this__success = new java.util.ArrayList<com.aries.department.athena.contract.thrift.dto.DepartmentInfo>(other.success.size());
        for (com.aries.department.athena.contract.thrift.dto.DepartmentInfo other_element : other.success) {
          __this__success.add(new com.aries.department.athena.contract.thrift.dto.DepartmentInfo(other_element));
        }
        this.success = __this__success;
      }
    }

    public getSubDepartments_result deepCopy() {
      return new getSubDepartments_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<com.aries.department.athena.contract.thrift.dto.DepartmentInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.aries.department.athena.contract.thrift.dto.DepartmentInfo elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<com.aries.department.athena.contract.thrift.dto.DepartmentInfo>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<com.aries.department.athena.contract.thrift.dto.DepartmentInfo> getSuccess() {
      return this.success;
    }

    public getSubDepartments_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<com.aries.department.athena.contract.thrift.dto.DepartmentInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<com.aries.department.athena.contract.thrift.dto.DepartmentInfo>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getSubDepartments_result)
        return this.equals((getSubDepartments_result)that);
      return false;
    }

    public boolean equals(getSubDepartments_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getSubDepartments_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getSubDepartments_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSubDepartments_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSubDepartments_resultStandardScheme getScheme() {
        return new getSubDepartments_resultStandardScheme();
      }
    }

    private static class getSubDepartments_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getSubDepartments_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSubDepartments_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<com.aries.department.athena.contract.thrift.dto.DepartmentInfo>(_list8.size);
                  @org.apache.thrift.annotation.Nullable com.aries.department.athena.contract.thrift.dto.DepartmentInfo _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = new com.aries.department.athena.contract.thrift.dto.DepartmentInfo();
                    _elem9.read(iprot);
                    struct.success.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSubDepartments_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.aries.department.athena.contract.thrift.dto.DepartmentInfo _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSubDepartments_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSubDepartments_resultTupleScheme getScheme() {
        return new getSubDepartments_resultTupleScheme();
      }
    }

    private static class getSubDepartments_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getSubDepartments_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSubDepartments_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.aries.department.athena.contract.thrift.dto.DepartmentInfo _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSubDepartments_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<com.aries.department.athena.contract.thrift.dto.DepartmentInfo>(_list13.size);
            @org.apache.thrift.annotation.Nullable com.aries.department.athena.contract.thrift.dto.DepartmentInfo _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = new com.aries.department.athena.contract.thrift.dto.DepartmentInfo();
              _elem14.read(iprot);
              struct.success.add(_elem14);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateDepartmentNameById_args implements org.apache.thrift.TBase<updateDepartmentNameById_args, updateDepartmentNameById_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateDepartmentNameById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateDepartmentNameById_args");

    private static final org.apache.thrift.protocol.TField COMPANY_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("companyInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DEPARTMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("departmentId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField NEW_DEPARTMENT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("newDepartmentName", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateDepartmentNameById_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateDepartmentNameById_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.aries.department.athena.contract.thrift.dto.CompanyInfo companyInfo; // required
    public long departmentId; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String newDepartmentName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMPANY_INFO((short)1, "companyInfo"),
      DEPARTMENT_ID((short)2, "departmentId"),
      NEW_DEPARTMENT_NAME((short)3, "newDepartmentName");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMPANY_INFO
            return COMPANY_INFO;
          case 2: // DEPARTMENT_ID
            return DEPARTMENT_ID;
          case 3: // NEW_DEPARTMENT_NAME
            return NEW_DEPARTMENT_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DEPARTMENTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMPANY_INFO, new org.apache.thrift.meta_data.FieldMetaData("companyInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.aries.department.athena.contract.thrift.dto.CompanyInfo.class)));
      tmpMap.put(_Fields.DEPARTMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("departmentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.NEW_DEPARTMENT_NAME, new org.apache.thrift.meta_data.FieldMetaData("newDepartmentName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateDepartmentNameById_args.class, metaDataMap);
    }

    public updateDepartmentNameById_args() {
    }

    public updateDepartmentNameById_args(
      com.aries.department.athena.contract.thrift.dto.CompanyInfo companyInfo,
      long departmentId,
      java.lang.String newDepartmentName)
    {
      this();
      this.companyInfo = companyInfo;
      this.departmentId = departmentId;
      setDepartmentIdIsSet(true);
      this.newDepartmentName = newDepartmentName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateDepartmentNameById_args(updateDepartmentNameById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetCompanyInfo()) {
        this.companyInfo = new com.aries.department.athena.contract.thrift.dto.CompanyInfo(other.companyInfo);
      }
      this.departmentId = other.departmentId;
      if (other.isSetNewDepartmentName()) {
        this.newDepartmentName = other.newDepartmentName;
      }
    }

    public updateDepartmentNameById_args deepCopy() {
      return new updateDepartmentNameById_args(this);
    }

    @Override
    public void clear() {
      this.companyInfo = null;
      setDepartmentIdIsSet(false);
      this.departmentId = 0;
      this.newDepartmentName = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.aries.department.athena.contract.thrift.dto.CompanyInfo getCompanyInfo() {
      return this.companyInfo;
    }

    public updateDepartmentNameById_args setCompanyInfo(@org.apache.thrift.annotation.Nullable com.aries.department.athena.contract.thrift.dto.CompanyInfo companyInfo) {
      this.companyInfo = companyInfo;
      return this;
    }

    public void unsetCompanyInfo() {
      this.companyInfo = null;
    }

    /** Returns true if field companyInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetCompanyInfo() {
      return this.companyInfo != null;
    }

    public void setCompanyInfoIsSet(boolean value) {
      if (!value) {
        this.companyInfo = null;
      }
    }

    public long getDepartmentId() {
      return this.departmentId;
    }

    public updateDepartmentNameById_args setDepartmentId(long departmentId) {
      this.departmentId = departmentId;
      setDepartmentIdIsSet(true);
      return this;
    }

    public void unsetDepartmentId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DEPARTMENTID_ISSET_ID);
    }

    /** Returns true if field departmentId is set (has been assigned a value) and false otherwise */
    public boolean isSetDepartmentId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DEPARTMENTID_ISSET_ID);
    }

    public void setDepartmentIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DEPARTMENTID_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getNewDepartmentName() {
      return this.newDepartmentName;
    }

    public updateDepartmentNameById_args setNewDepartmentName(@org.apache.thrift.annotation.Nullable java.lang.String newDepartmentName) {
      this.newDepartmentName = newDepartmentName;
      return this;
    }

    public void unsetNewDepartmentName() {
      this.newDepartmentName = null;
    }

    /** Returns true if field newDepartmentName is set (has been assigned a value) and false otherwise */
    public boolean isSetNewDepartmentName() {
      return this.newDepartmentName != null;
    }

    public void setNewDepartmentNameIsSet(boolean value) {
      if (!value) {
        this.newDepartmentName = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case COMPANY_INFO:
        if (value == null) {
          unsetCompanyInfo();
        } else {
          setCompanyInfo((com.aries.department.athena.contract.thrift.dto.CompanyInfo)value);
        }
        break;

      case DEPARTMENT_ID:
        if (value == null) {
          unsetDepartmentId();
        } else {
          setDepartmentId((java.lang.Long)value);
        }
        break;

      case NEW_DEPARTMENT_NAME:
        if (value == null) {
          unsetNewDepartmentName();
        } else {
          setNewDepartmentName((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case COMPANY_INFO:
        return getCompanyInfo();

      case DEPARTMENT_ID:
        return getDepartmentId();

      case NEW_DEPARTMENT_NAME:
        return getNewDepartmentName();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case COMPANY_INFO:
        return isSetCompanyInfo();
      case DEPARTMENT_ID:
        return isSetDepartmentId();
      case NEW_DEPARTMENT_NAME:
        return isSetNewDepartmentName();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updateDepartmentNameById_args)
        return this.equals((updateDepartmentNameById_args)that);
      return false;
    }

    public boolean equals(updateDepartmentNameById_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_companyInfo = true && this.isSetCompanyInfo();
      boolean that_present_companyInfo = true && that.isSetCompanyInfo();
      if (this_present_companyInfo || that_present_companyInfo) {
        if (!(this_present_companyInfo && that_present_companyInfo))
          return false;
        if (!this.companyInfo.equals(that.companyInfo))
          return false;
      }

      boolean this_present_departmentId = true;
      boolean that_present_departmentId = true;
      if (this_present_departmentId || that_present_departmentId) {
        if (!(this_present_departmentId && that_present_departmentId))
          return false;
        if (this.departmentId != that.departmentId)
          return false;
      }

      boolean this_present_newDepartmentName = true && this.isSetNewDepartmentName();
      boolean that_present_newDepartmentName = true && that.isSetNewDepartmentName();
      if (this_present_newDepartmentName || that_present_newDepartmentName) {
        if (!(this_present_newDepartmentName && that_present_newDepartmentName))
          return false;
        if (!this.newDepartmentName.equals(that.newDepartmentName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCompanyInfo()) ? 131071 : 524287);
      if (isSetCompanyInfo())
        hashCode = hashCode * 8191 + companyInfo.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(departmentId);

      hashCode = hashCode * 8191 + ((isSetNewDepartmentName()) ? 131071 : 524287);
      if (isSetNewDepartmentName())
        hashCode = hashCode * 8191 + newDepartmentName.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateDepartmentNameById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetCompanyInfo()).compareTo(other.isSetCompanyInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCompanyInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyInfo, other.companyInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDepartmentId()).compareTo(other.isSetDepartmentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDepartmentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.departmentId, other.departmentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNewDepartmentName()).compareTo(other.isSetNewDepartmentName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNewDepartmentName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newDepartmentName, other.newDepartmentName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateDepartmentNameById_args(");
      boolean first = true;

      sb.append("companyInfo:");
      if (this.companyInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.companyInfo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("departmentId:");
      sb.append(this.departmentId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("newDepartmentName:");
      if (this.newDepartmentName == null) {
        sb.append("null");
      } else {
        sb.append(this.newDepartmentName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (companyInfo != null) {
        companyInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateDepartmentNameById_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateDepartmentNameById_argsStandardScheme getScheme() {
        return new updateDepartmentNameById_argsStandardScheme();
      }
    }

    private static class updateDepartmentNameById_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateDepartmentNameById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateDepartmentNameById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMPANY_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.companyInfo = new com.aries.department.athena.contract.thrift.dto.CompanyInfo();
                struct.companyInfo.read(iprot);
                struct.setCompanyInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEPARTMENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.departmentId = iprot.readI64();
                struct.setDepartmentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NEW_DEPARTMENT_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.newDepartmentName = iprot.readString();
                struct.setNewDepartmentNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateDepartmentNameById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.companyInfo != null) {
          oprot.writeFieldBegin(COMPANY_INFO_FIELD_DESC);
          struct.companyInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(DEPARTMENT_ID_FIELD_DESC);
        oprot.writeI64(struct.departmentId);
        oprot.writeFieldEnd();
        if (struct.newDepartmentName != null) {
          oprot.writeFieldBegin(NEW_DEPARTMENT_NAME_FIELD_DESC);
          oprot.writeString(struct.newDepartmentName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateDepartmentNameById_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateDepartmentNameById_argsTupleScheme getScheme() {
        return new updateDepartmentNameById_argsTupleScheme();
      }
    }

    private static class updateDepartmentNameById_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateDepartmentNameById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateDepartmentNameById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCompanyInfo()) {
          optionals.set(0);
        }
        if (struct.isSetDepartmentId()) {
          optionals.set(1);
        }
        if (struct.isSetNewDepartmentName()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCompanyInfo()) {
          struct.companyInfo.write(oprot);
        }
        if (struct.isSetDepartmentId()) {
          oprot.writeI64(struct.departmentId);
        }
        if (struct.isSetNewDepartmentName()) {
          oprot.writeString(struct.newDepartmentName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateDepartmentNameById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.companyInfo = new com.aries.department.athena.contract.thrift.dto.CompanyInfo();
          struct.companyInfo.read(iprot);
          struct.setCompanyInfoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.departmentId = iprot.readI64();
          struct.setDepartmentIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.newDepartmentName = iprot.readString();
          struct.setNewDepartmentNameIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateDepartmentNameById_result implements org.apache.thrift.TBase<updateDepartmentNameById_result, updateDepartmentNameById_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateDepartmentNameById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateDepartmentNameById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateDepartmentNameById_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateDepartmentNameById_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.aries.department.athena.contract.thrift.dto.AthenaResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.aries.department.athena.contract.thrift.dto.AthenaResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateDepartmentNameById_result.class, metaDataMap);
    }

    public updateDepartmentNameById_result() {
    }

    public updateDepartmentNameById_result(
      com.aries.department.athena.contract.thrift.dto.AthenaResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateDepartmentNameById_result(updateDepartmentNameById_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.aries.department.athena.contract.thrift.dto.AthenaResponse(other.success);
      }
    }

    public updateDepartmentNameById_result deepCopy() {
      return new updateDepartmentNameById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.aries.department.athena.contract.thrift.dto.AthenaResponse getSuccess() {
      return this.success;
    }

    public updateDepartmentNameById_result setSuccess(@org.apache.thrift.annotation.Nullable com.aries.department.athena.contract.thrift.dto.AthenaResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.aries.department.athena.contract.thrift.dto.AthenaResponse)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updateDepartmentNameById_result)
        return this.equals((updateDepartmentNameById_result)that);
      return false;
    }

    public boolean equals(updateDepartmentNameById_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateDepartmentNameById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateDepartmentNameById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateDepartmentNameById_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateDepartmentNameById_resultStandardScheme getScheme() {
        return new updateDepartmentNameById_resultStandardScheme();
      }
    }

    private static class updateDepartmentNameById_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateDepartmentNameById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateDepartmentNameById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.aries.department.athena.contract.thrift.dto.AthenaResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateDepartmentNameById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateDepartmentNameById_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateDepartmentNameById_resultTupleScheme getScheme() {
        return new updateDepartmentNameById_resultTupleScheme();
      }
    }

    private static class updateDepartmentNameById_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateDepartmentNameById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateDepartmentNameById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateDepartmentNameById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.aries.department.athena.contract.thrift.dto.AthenaResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateDepartmentLeaderById_args implements org.apache.thrift.TBase<updateDepartmentLeaderById_args, updateDepartmentLeaderById_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateDepartmentLeaderById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateDepartmentLeaderById_args");

    private static final org.apache.thrift.protocol.TField COMPANY_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("companyInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DEPARTMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("departmentId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField LEADER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("leaderId", org.apache.thrift.protocol.TType.I64, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateDepartmentLeaderById_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateDepartmentLeaderById_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.aries.department.athena.contract.thrift.dto.CompanyInfo companyInfo; // required
    public long departmentId; // required
    public long leaderId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMPANY_INFO((short)1, "companyInfo"),
      DEPARTMENT_ID((short)2, "departmentId"),
      LEADER_ID((short)3, "leaderId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMPANY_INFO
            return COMPANY_INFO;
          case 2: // DEPARTMENT_ID
            return DEPARTMENT_ID;
          case 3: // LEADER_ID
            return LEADER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DEPARTMENTID_ISSET_ID = 0;
    private static final int __LEADERID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMPANY_INFO, new org.apache.thrift.meta_data.FieldMetaData("companyInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.aries.department.athena.contract.thrift.dto.CompanyInfo.class)));
      tmpMap.put(_Fields.DEPARTMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("departmentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.LEADER_ID, new org.apache.thrift.meta_data.FieldMetaData("leaderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateDepartmentLeaderById_args.class, metaDataMap);
    }

    public updateDepartmentLeaderById_args() {
    }

    public updateDepartmentLeaderById_args(
      com.aries.department.athena.contract.thrift.dto.CompanyInfo companyInfo,
      long departmentId,
      long leaderId)
    {
      this();
      this.companyInfo = companyInfo;
      this.departmentId = departmentId;
      setDepartmentIdIsSet(true);
      this.leaderId = leaderId;
      setLeaderIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateDepartmentLeaderById_args(updateDepartmentLeaderById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetCompanyInfo()) {
        this.companyInfo = new com.aries.department.athena.contract.thrift.dto.CompanyInfo(other.companyInfo);
      }
      this.departmentId = other.departmentId;
      this.leaderId = other.leaderId;
    }

    public updateDepartmentLeaderById_args deepCopy() {
      return new updateDepartmentLeaderById_args(this);
    }

    @Override
    public void clear() {
      this.companyInfo = null;
      setDepartmentIdIsSet(false);
      this.departmentId = 0;
      setLeaderIdIsSet(false);
      this.leaderId = 0;
    }

    @org.apache.thrift.annotation.Nullable
    public com.aries.department.athena.contract.thrift.dto.CompanyInfo getCompanyInfo() {
      return this.companyInfo;
    }

    public updateDepartmentLeaderById_args setCompanyInfo(@org.apache.thrift.annotation.Nullable com.aries.department.athena.contract.thrift.dto.CompanyInfo companyInfo) {
      this.companyInfo = companyInfo;
      return this;
    }

    public void unsetCompanyInfo() {
      this.companyInfo = null;
    }

    /** Returns true if field companyInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetCompanyInfo() {
      return this.companyInfo != null;
    }

    public void setCompanyInfoIsSet(boolean value) {
      if (!value) {
        this.companyInfo = null;
      }
    }

    public long getDepartmentId() {
      return this.departmentId;
    }

    public updateDepartmentLeaderById_args setDepartmentId(long departmentId) {
      this.departmentId = departmentId;
      setDepartmentIdIsSet(true);
      return this;
    }

    public void unsetDepartmentId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DEPARTMENTID_ISSET_ID);
    }

    /** Returns true if field departmentId is set (has been assigned a value) and false otherwise */
    public boolean isSetDepartmentId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DEPARTMENTID_ISSET_ID);
    }

    public void setDepartmentIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DEPARTMENTID_ISSET_ID, value);
    }

    public long getLeaderId() {
      return this.leaderId;
    }

    public updateDepartmentLeaderById_args setLeaderId(long leaderId) {
      this.leaderId = leaderId;
      setLeaderIdIsSet(true);
      return this;
    }

    public void unsetLeaderId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LEADERID_ISSET_ID);
    }

    /** Returns true if field leaderId is set (has been assigned a value) and false otherwise */
    public boolean isSetLeaderId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LEADERID_ISSET_ID);
    }

    public void setLeaderIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LEADERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case COMPANY_INFO:
        if (value == null) {
          unsetCompanyInfo();
        } else {
          setCompanyInfo((com.aries.department.athena.contract.thrift.dto.CompanyInfo)value);
        }
        break;

      case DEPARTMENT_ID:
        if (value == null) {
          unsetDepartmentId();
        } else {
          setDepartmentId((java.lang.Long)value);
        }
        break;

      case LEADER_ID:
        if (value == null) {
          unsetLeaderId();
        } else {
          setLeaderId((java.lang.Long)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case COMPANY_INFO:
        return getCompanyInfo();

      case DEPARTMENT_ID:
        return getDepartmentId();

      case LEADER_ID:
        return getLeaderId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case COMPANY_INFO:
        return isSetCompanyInfo();
      case DEPARTMENT_ID:
        return isSetDepartmentId();
      case LEADER_ID:
        return isSetLeaderId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updateDepartmentLeaderById_args)
        return this.equals((updateDepartmentLeaderById_args)that);
      return false;
    }

    public boolean equals(updateDepartmentLeaderById_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_companyInfo = true && this.isSetCompanyInfo();
      boolean that_present_companyInfo = true && that.isSetCompanyInfo();
      if (this_present_companyInfo || that_present_companyInfo) {
        if (!(this_present_companyInfo && that_present_companyInfo))
          return false;
        if (!this.companyInfo.equals(that.companyInfo))
          return false;
      }

      boolean this_present_departmentId = true;
      boolean that_present_departmentId = true;
      if (this_present_departmentId || that_present_departmentId) {
        if (!(this_present_departmentId && that_present_departmentId))
          return false;
        if (this.departmentId != that.departmentId)
          return false;
      }

      boolean this_present_leaderId = true;
      boolean that_present_leaderId = true;
      if (this_present_leaderId || that_present_leaderId) {
        if (!(this_present_leaderId && that_present_leaderId))
          return false;
        if (this.leaderId != that.leaderId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCompanyInfo()) ? 131071 : 524287);
      if (isSetCompanyInfo())
        hashCode = hashCode * 8191 + companyInfo.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(departmentId);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(leaderId);

      return hashCode;
    }

    @Override
    public int compareTo(updateDepartmentLeaderById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetCompanyInfo()).compareTo(other.isSetCompanyInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCompanyInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyInfo, other.companyInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDepartmentId()).compareTo(other.isSetDepartmentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDepartmentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.departmentId, other.departmentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLeaderId()).compareTo(other.isSetLeaderId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLeaderId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.leaderId, other.leaderId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateDepartmentLeaderById_args(");
      boolean first = true;

      sb.append("companyInfo:");
      if (this.companyInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.companyInfo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("departmentId:");
      sb.append(this.departmentId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("leaderId:");
      sb.append(this.leaderId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (companyInfo != null) {
        companyInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateDepartmentLeaderById_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateDepartmentLeaderById_argsStandardScheme getScheme() {
        return new updateDepartmentLeaderById_argsStandardScheme();
      }
    }

    private static class updateDepartmentLeaderById_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateDepartmentLeaderById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateDepartmentLeaderById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMPANY_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.companyInfo = new com.aries.department.athena.contract.thrift.dto.CompanyInfo();
                struct.companyInfo.read(iprot);
                struct.setCompanyInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEPARTMENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.departmentId = iprot.readI64();
                struct.setDepartmentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // LEADER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.leaderId = iprot.readI64();
                struct.setLeaderIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateDepartmentLeaderById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.companyInfo != null) {
          oprot.writeFieldBegin(COMPANY_INFO_FIELD_DESC);
          struct.companyInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(DEPARTMENT_ID_FIELD_DESC);
        oprot.writeI64(struct.departmentId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LEADER_ID_FIELD_DESC);
        oprot.writeI64(struct.leaderId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateDepartmentLeaderById_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateDepartmentLeaderById_argsTupleScheme getScheme() {
        return new updateDepartmentLeaderById_argsTupleScheme();
      }
    }

    private static class updateDepartmentLeaderById_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateDepartmentLeaderById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateDepartmentLeaderById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCompanyInfo()) {
          optionals.set(0);
        }
        if (struct.isSetDepartmentId()) {
          optionals.set(1);
        }
        if (struct.isSetLeaderId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCompanyInfo()) {
          struct.companyInfo.write(oprot);
        }
        if (struct.isSetDepartmentId()) {
          oprot.writeI64(struct.departmentId);
        }
        if (struct.isSetLeaderId()) {
          oprot.writeI64(struct.leaderId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateDepartmentLeaderById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.companyInfo = new com.aries.department.athena.contract.thrift.dto.CompanyInfo();
          struct.companyInfo.read(iprot);
          struct.setCompanyInfoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.departmentId = iprot.readI64();
          struct.setDepartmentIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.leaderId = iprot.readI64();
          struct.setLeaderIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateDepartmentLeaderById_result implements org.apache.thrift.TBase<updateDepartmentLeaderById_result, updateDepartmentLeaderById_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateDepartmentLeaderById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateDepartmentLeaderById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateDepartmentLeaderById_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateDepartmentLeaderById_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.aries.department.athena.contract.thrift.dto.AthenaResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.aries.department.athena.contract.thrift.dto.AthenaResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateDepartmentLeaderById_result.class, metaDataMap);
    }

    public updateDepartmentLeaderById_result() {
    }

    public updateDepartmentLeaderById_result(
      com.aries.department.athena.contract.thrift.dto.AthenaResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateDepartmentLeaderById_result(updateDepartmentLeaderById_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.aries.department.athena.contract.thrift.dto.AthenaResponse(other.success);
      }
    }

    public updateDepartmentLeaderById_result deepCopy() {
      return new updateDepartmentLeaderById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.aries.department.athena.contract.thrift.dto.AthenaResponse getSuccess() {
      return this.success;
    }

    public updateDepartmentLeaderById_result setSuccess(@org.apache.thrift.annotation.Nullable com.aries.department.athena.contract.thrift.dto.AthenaResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.aries.department.athena.contract.thrift.dto.AthenaResponse)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updateDepartmentLeaderById_result)
        return this.equals((updateDepartmentLeaderById_result)that);
      return false;
    }

    public boolean equals(updateDepartmentLeaderById_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateDepartmentLeaderById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateDepartmentLeaderById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateDepartmentLeaderById_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateDepartmentLeaderById_resultStandardScheme getScheme() {
        return new updateDepartmentLeaderById_resultStandardScheme();
      }
    }

    private static class updateDepartmentLeaderById_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateDepartmentLeaderById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateDepartmentLeaderById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.aries.department.athena.contract.thrift.dto.AthenaResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateDepartmentLeaderById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateDepartmentLeaderById_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateDepartmentLeaderById_resultTupleScheme getScheme() {
        return new updateDepartmentLeaderById_resultTupleScheme();
      }
    }

    private static class updateDepartmentLeaderById_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateDepartmentLeaderById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateDepartmentLeaderById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateDepartmentLeaderById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.aries.department.athena.contract.thrift.dto.AthenaResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateSupDepartmentById_args implements org.apache.thrift.TBase<updateSupDepartmentById_args, updateSupDepartmentById_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateSupDepartmentById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateSupDepartmentById_args");

    private static final org.apache.thrift.protocol.TField COMPANY_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("companyInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DEPARTMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("departmentId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField SUP_DEPARTMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("supDepartmentId", org.apache.thrift.protocol.TType.I64, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateSupDepartmentById_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateSupDepartmentById_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.aries.department.athena.contract.thrift.dto.CompanyInfo companyInfo; // required
    public long departmentId; // required
    public long supDepartmentId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMPANY_INFO((short)1, "companyInfo"),
      DEPARTMENT_ID((short)2, "departmentId"),
      SUP_DEPARTMENT_ID((short)3, "supDepartmentId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMPANY_INFO
            return COMPANY_INFO;
          case 2: // DEPARTMENT_ID
            return DEPARTMENT_ID;
          case 3: // SUP_DEPARTMENT_ID
            return SUP_DEPARTMENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DEPARTMENTID_ISSET_ID = 0;
    private static final int __SUPDEPARTMENTID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMPANY_INFO, new org.apache.thrift.meta_data.FieldMetaData("companyInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.aries.department.athena.contract.thrift.dto.CompanyInfo.class)));
      tmpMap.put(_Fields.DEPARTMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("departmentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.SUP_DEPARTMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("supDepartmentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateSupDepartmentById_args.class, metaDataMap);
    }

    public updateSupDepartmentById_args() {
    }

    public updateSupDepartmentById_args(
      com.aries.department.athena.contract.thrift.dto.CompanyInfo companyInfo,
      long departmentId,
      long supDepartmentId)
    {
      this();
      this.companyInfo = companyInfo;
      this.departmentId = departmentId;
      setDepartmentIdIsSet(true);
      this.supDepartmentId = supDepartmentId;
      setSupDepartmentIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateSupDepartmentById_args(updateSupDepartmentById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetCompanyInfo()) {
        this.companyInfo = new com.aries.department.athena.contract.thrift.dto.CompanyInfo(other.companyInfo);
      }
      this.departmentId = other.departmentId;
      this.supDepartmentId = other.supDepartmentId;
    }

    public updateSupDepartmentById_args deepCopy() {
      return new updateSupDepartmentById_args(this);
    }

    @Override
    public void clear() {
      this.companyInfo = null;
      setDepartmentIdIsSet(false);
      this.departmentId = 0;
      setSupDepartmentIdIsSet(false);
      this.supDepartmentId = 0;
    }

    @org.apache.thrift.annotation.Nullable
    public com.aries.department.athena.contract.thrift.dto.CompanyInfo getCompanyInfo() {
      return this.companyInfo;
    }

    public updateSupDepartmentById_args setCompanyInfo(@org.apache.thrift.annotation.Nullable com.aries.department.athena.contract.thrift.dto.CompanyInfo companyInfo) {
      this.companyInfo = companyInfo;
      return this;
    }

    public void unsetCompanyInfo() {
      this.companyInfo = null;
    }

    /** Returns true if field companyInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetCompanyInfo() {
      return this.companyInfo != null;
    }

    public void setCompanyInfoIsSet(boolean value) {
      if (!value) {
        this.companyInfo = null;
      }
    }

    public long getDepartmentId() {
      return this.departmentId;
    }

    public updateSupDepartmentById_args setDepartmentId(long departmentId) {
      this.departmentId = departmentId;
      setDepartmentIdIsSet(true);
      return this;
    }

    public void unsetDepartmentId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DEPARTMENTID_ISSET_ID);
    }

    /** Returns true if field departmentId is set (has been assigned a value) and false otherwise */
    public boolean isSetDepartmentId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DEPARTMENTID_ISSET_ID);
    }

    public void setDepartmentIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DEPARTMENTID_ISSET_ID, value);
    }

    public long getSupDepartmentId() {
      return this.supDepartmentId;
    }

    public updateSupDepartmentById_args setSupDepartmentId(long supDepartmentId) {
      this.supDepartmentId = supDepartmentId;
      setSupDepartmentIdIsSet(true);
      return this;
    }

    public void unsetSupDepartmentId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUPDEPARTMENTID_ISSET_ID);
    }

    /** Returns true if field supDepartmentId is set (has been assigned a value) and false otherwise */
    public boolean isSetSupDepartmentId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUPDEPARTMENTID_ISSET_ID);
    }

    public void setSupDepartmentIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUPDEPARTMENTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case COMPANY_INFO:
        if (value == null) {
          unsetCompanyInfo();
        } else {
          setCompanyInfo((com.aries.department.athena.contract.thrift.dto.CompanyInfo)value);
        }
        break;

      case DEPARTMENT_ID:
        if (value == null) {
          unsetDepartmentId();
        } else {
          setDepartmentId((java.lang.Long)value);
        }
        break;

      case SUP_DEPARTMENT_ID:
        if (value == null) {
          unsetSupDepartmentId();
        } else {
          setSupDepartmentId((java.lang.Long)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case COMPANY_INFO:
        return getCompanyInfo();

      case DEPARTMENT_ID:
        return getDepartmentId();

      case SUP_DEPARTMENT_ID:
        return getSupDepartmentId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case COMPANY_INFO:
        return isSetCompanyInfo();
      case DEPARTMENT_ID:
        return isSetDepartmentId();
      case SUP_DEPARTMENT_ID:
        return isSetSupDepartmentId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updateSupDepartmentById_args)
        return this.equals((updateSupDepartmentById_args)that);
      return false;
    }

    public boolean equals(updateSupDepartmentById_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_companyInfo = true && this.isSetCompanyInfo();
      boolean that_present_companyInfo = true && that.isSetCompanyInfo();
      if (this_present_companyInfo || that_present_companyInfo) {
        if (!(this_present_companyInfo && that_present_companyInfo))
          return false;
        if (!this.companyInfo.equals(that.companyInfo))
          return false;
      }

      boolean this_present_departmentId = true;
      boolean that_present_departmentId = true;
      if (this_present_departmentId || that_present_departmentId) {
        if (!(this_present_departmentId && that_present_departmentId))
          return false;
        if (this.departmentId != that.departmentId)
          return false;
      }

      boolean this_present_supDepartmentId = true;
      boolean that_present_supDepartmentId = true;
      if (this_present_supDepartmentId || that_present_supDepartmentId) {
        if (!(this_present_supDepartmentId && that_present_supDepartmentId))
          return false;
        if (this.supDepartmentId != that.supDepartmentId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCompanyInfo()) ? 131071 : 524287);
      if (isSetCompanyInfo())
        hashCode = hashCode * 8191 + companyInfo.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(departmentId);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(supDepartmentId);

      return hashCode;
    }

    @Override
    public int compareTo(updateSupDepartmentById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetCompanyInfo()).compareTo(other.isSetCompanyInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCompanyInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyInfo, other.companyInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDepartmentId()).compareTo(other.isSetDepartmentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDepartmentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.departmentId, other.departmentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSupDepartmentId()).compareTo(other.isSetSupDepartmentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSupDepartmentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.supDepartmentId, other.supDepartmentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateSupDepartmentById_args(");
      boolean first = true;

      sb.append("companyInfo:");
      if (this.companyInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.companyInfo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("departmentId:");
      sb.append(this.departmentId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("supDepartmentId:");
      sb.append(this.supDepartmentId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (companyInfo != null) {
        companyInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateSupDepartmentById_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateSupDepartmentById_argsStandardScheme getScheme() {
        return new updateSupDepartmentById_argsStandardScheme();
      }
    }

    private static class updateSupDepartmentById_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateSupDepartmentById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateSupDepartmentById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMPANY_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.companyInfo = new com.aries.department.athena.contract.thrift.dto.CompanyInfo();
                struct.companyInfo.read(iprot);
                struct.setCompanyInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEPARTMENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.departmentId = iprot.readI64();
                struct.setDepartmentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SUP_DEPARTMENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.supDepartmentId = iprot.readI64();
                struct.setSupDepartmentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateSupDepartmentById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.companyInfo != null) {
          oprot.writeFieldBegin(COMPANY_INFO_FIELD_DESC);
          struct.companyInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(DEPARTMENT_ID_FIELD_DESC);
        oprot.writeI64(struct.departmentId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SUP_DEPARTMENT_ID_FIELD_DESC);
        oprot.writeI64(struct.supDepartmentId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateSupDepartmentById_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateSupDepartmentById_argsTupleScheme getScheme() {
        return new updateSupDepartmentById_argsTupleScheme();
      }
    }

    private static class updateSupDepartmentById_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateSupDepartmentById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateSupDepartmentById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCompanyInfo()) {
          optionals.set(0);
        }
        if (struct.isSetDepartmentId()) {
          optionals.set(1);
        }
        if (struct.isSetSupDepartmentId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCompanyInfo()) {
          struct.companyInfo.write(oprot);
        }
        if (struct.isSetDepartmentId()) {
          oprot.writeI64(struct.departmentId);
        }
        if (struct.isSetSupDepartmentId()) {
          oprot.writeI64(struct.supDepartmentId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateSupDepartmentById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.companyInfo = new com.aries.department.athena.contract.thrift.dto.CompanyInfo();
          struct.companyInfo.read(iprot);
          struct.setCompanyInfoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.departmentId = iprot.readI64();
          struct.setDepartmentIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.supDepartmentId = iprot.readI64();
          struct.setSupDepartmentIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateSupDepartmentById_result implements org.apache.thrift.TBase<updateSupDepartmentById_result, updateSupDepartmentById_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateSupDepartmentById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateSupDepartmentById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateSupDepartmentById_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateSupDepartmentById_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.aries.department.athena.contract.thrift.dto.AthenaResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.aries.department.athena.contract.thrift.dto.AthenaResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateSupDepartmentById_result.class, metaDataMap);
    }

    public updateSupDepartmentById_result() {
    }

    public updateSupDepartmentById_result(
      com.aries.department.athena.contract.thrift.dto.AthenaResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateSupDepartmentById_result(updateSupDepartmentById_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.aries.department.athena.contract.thrift.dto.AthenaResponse(other.success);
      }
    }

    public updateSupDepartmentById_result deepCopy() {
      return new updateSupDepartmentById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.aries.department.athena.contract.thrift.dto.AthenaResponse getSuccess() {
      return this.success;
    }

    public updateSupDepartmentById_result setSuccess(@org.apache.thrift.annotation.Nullable com.aries.department.athena.contract.thrift.dto.AthenaResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.aries.department.athena.contract.thrift.dto.AthenaResponse)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updateSupDepartmentById_result)
        return this.equals((updateSupDepartmentById_result)that);
      return false;
    }

    public boolean equals(updateSupDepartmentById_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateSupDepartmentById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateSupDepartmentById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateSupDepartmentById_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateSupDepartmentById_resultStandardScheme getScheme() {
        return new updateSupDepartmentById_resultStandardScheme();
      }
    }

    private static class updateSupDepartmentById_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateSupDepartmentById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateSupDepartmentById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.aries.department.athena.contract.thrift.dto.AthenaResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateSupDepartmentById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateSupDepartmentById_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateSupDepartmentById_resultTupleScheme getScheme() {
        return new updateSupDepartmentById_resultTupleScheme();
      }
    }

    private static class updateSupDepartmentById_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateSupDepartmentById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateSupDepartmentById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateSupDepartmentById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.aries.department.athena.contract.thrift.dto.AthenaResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
